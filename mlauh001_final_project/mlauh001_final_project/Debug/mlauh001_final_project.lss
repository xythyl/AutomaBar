
mlauh001_final_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  0000133c  000013d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000133c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000654  008001c6  008001c6  00001496  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000260  00000000  00000000  00001508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002566  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000993  00000000  00000000  00003cce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000187f  00000000  00000000  00004661  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  00005ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ebf  00000000  00000000  000064b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001587  00000000  00000000  00007373  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  000088fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
       6:	00 00       	nop
       8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
       a:	00 00       	nop
       c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	05 c6       	rjmp	.+3082   	; 0xc40 <__vector_13>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e3       	ldi	r30, 0x3C	; 60
      a0:	f3 e1       	ldi	r31, 0x13	; 19
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 3c       	cpi	r26, 0xC6	; 198
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	a6 ec       	ldi	r26, 0xC6	; 198
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 31       	cpi	r26, 0x1A	; 26
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	56 d4       	rcall	.+2220   	; 0x970 <main>
      c4:	0c 94 9c 09 	jmp	0x1338	; 0x1338 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
      d0:	0a d7       	rcall	.+3604   	; 0xee6 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
      d2:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <__data_end>
      d6:	30 91 c7 01 	lds	r19, 0x01C7	; 0x8001c7 <__data_end+0x1>
      da:	ce 01       	movw	r24, r28
      dc:	82 0f       	add	r24, r18
      de:	93 1f       	adc	r25, r19
      e0:	8c 3d       	cpi	r24, 0xDC	; 220
      e2:	45 e0       	ldi	r20, 0x05	; 5
      e4:	94 07       	cpc	r25, r20
      e6:	58 f4       	brcc	.+22     	; 0xfe <pvPortMalloc+0x34>
      e8:	28 17       	cp	r18, r24
      ea:	39 07       	cpc	r19, r25
      ec:	58 f4       	brcc	.+22     	; 0x104 <pvPortMalloc+0x3a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
      ee:	e9 01       	movw	r28, r18
      f0:	c8 53       	subi	r28, 0x38	; 56
      f2:	de 4f       	sbci	r29, 0xFE	; 254
			xNextFreeByte += xWantedSize;			
      f4:	90 93 c7 01 	sts	0x01C7, r25	; 0x8001c7 <__data_end+0x1>
      f8:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__data_end>
      fc:	05 c0       	rjmp	.+10     	; 0x108 <pvPortMalloc+0x3e>
static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL; 
      fe:	c0 e0       	ldi	r28, 0x00	; 0
     100:	d0 e0       	ldi	r29, 0x00	; 0
     102:	02 c0       	rjmp	.+4      	; 0x108 <pvPortMalloc+0x3e>
     104:	c0 e0       	ldi	r28, 0x00	; 0
     106:	d0 e0       	ldi	r29, 0x00	; 0
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
			xNextFreeByte += xWantedSize;			
		}	
	}
	xTaskResumeAll();
     108:	b5 d7       	rcall	.+3946   	; 0x1074 <xTaskResumeAll>
		}
	}
	#endif	

	return pvReturn;
}
     10a:	ce 01       	movw	r24, r28
     10c:	df 91       	pop	r29
     10e:	cf 91       	pop	r28
     110:	08 95       	ret

00000112 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     112:	08 95       	ret

00000114 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
     114:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
     116:	03 96       	adiw	r24, 0x03	; 3
     118:	92 83       	std	Z+2, r25	; 0x02
     11a:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     11c:	2f ef       	ldi	r18, 0xFF	; 255
     11e:	3f ef       	ldi	r19, 0xFF	; 255
     120:	34 83       	std	Z+4, r19	; 0x04
     122:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
     124:	96 83       	std	Z+6, r25	; 0x06
     126:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
     128:	90 87       	std	Z+8, r25	; 0x08
     12a:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
     12c:	10 82       	st	Z, r1
     12e:	08 95       	ret

00000130 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     130:	fc 01       	movw	r30, r24
     132:	11 86       	std	Z+9, r1	; 0x09
     134:	10 86       	std	Z+8, r1	; 0x08
     136:	08 95       	ret

00000138 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	fc 01       	movw	r30, r24
     13e:	db 01       	movw	r26, r22

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
     140:	21 81       	ldd	r18, Z+1	; 0x01
     142:	32 81       	ldd	r19, Z+2	; 0x02

	pxNewListItem->pxNext = pxIndex->pxNext;
     144:	e9 01       	movw	r28, r18
     146:	8a 81       	ldd	r24, Y+2	; 0x02
     148:	9b 81       	ldd	r25, Y+3	; 0x03
     14a:	13 96       	adiw	r26, 0x03	; 3
     14c:	9c 93       	st	X, r25
     14e:	8e 93       	st	-X, r24
     150:	12 97       	sbiw	r26, 0x02	; 2
	pxNewListItem->pxPrevious = pxList->pxIndex;
     152:	81 81       	ldd	r24, Z+1	; 0x01
     154:	92 81       	ldd	r25, Z+2	; 0x02
     156:	15 96       	adiw	r26, 0x05	; 5
     158:	9c 93       	st	X, r25
     15a:	8e 93       	st	-X, r24
     15c:	14 97       	sbiw	r26, 0x04	; 4
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     15e:	8a 81       	ldd	r24, Y+2	; 0x02
     160:	9b 81       	ldd	r25, Y+3	; 0x03
     162:	ec 01       	movw	r28, r24
     164:	7d 83       	std	Y+5, r23	; 0x05
     166:	6c 83       	std	Y+4, r22	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
     168:	e9 01       	movw	r28, r18
     16a:	7b 83       	std	Y+3, r23	; 0x03
     16c:	6a 83       	std	Y+2, r22	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
     16e:	72 83       	std	Z+2, r23	; 0x02
     170:	61 83       	std	Z+1, r22	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     172:	19 96       	adiw	r26, 0x09	; 9
     174:	fc 93       	st	X, r31
     176:	ee 93       	st	-X, r30
     178:	18 97       	sbiw	r26, 0x08	; 8

	( pxList->uxNumberOfItems )++;
     17a:	80 81       	ld	r24, Z
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 83       	st	Z, r24
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	08 95       	ret

00000186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
     186:	cf 93       	push	r28
     188:	df 93       	push	r29
     18a:	eb 01       	movw	r28, r22
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
     18c:	48 81       	ld	r20, Y
     18e:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     190:	4f 3f       	cpi	r20, 0xFF	; 255
     192:	2f ef       	ldi	r18, 0xFF	; 255
     194:	52 07       	cpc	r21, r18
     196:	31 f4       	brne	.+12     	; 0x1a4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     198:	dc 01       	movw	r26, r24
     19a:	17 96       	adiw	r26, 0x07	; 7
     19c:	ed 91       	ld	r30, X+
     19e:	fc 91       	ld	r31, X
     1a0:	18 97       	sbiw	r26, 0x08	; 8
     1a2:	17 c0       	rjmp	.+46     	; 0x1d2 <vListInsert+0x4c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
     1a4:	fc 01       	movw	r30, r24
     1a6:	33 96       	adiw	r30, 0x03	; 3
     1a8:	dc 01       	movw	r26, r24
     1aa:	15 96       	adiw	r26, 0x05	; 5
     1ac:	2d 91       	ld	r18, X+
     1ae:	3c 91       	ld	r19, X
     1b0:	16 97       	sbiw	r26, 0x06	; 6
     1b2:	d9 01       	movw	r26, r18
     1b4:	2d 91       	ld	r18, X+
     1b6:	3c 91       	ld	r19, X
     1b8:	42 17       	cp	r20, r18
     1ba:	53 07       	cpc	r21, r19
     1bc:	50 f0       	brcs	.+20     	; 0x1d2 <vListInsert+0x4c>
     1be:	02 80       	ldd	r0, Z+2	; 0x02
     1c0:	f3 81       	ldd	r31, Z+3	; 0x03
     1c2:	e0 2d       	mov	r30, r0
     1c4:	a2 81       	ldd	r26, Z+2	; 0x02
     1c6:	b3 81       	ldd	r27, Z+3	; 0x03
     1c8:	2d 91       	ld	r18, X+
     1ca:	3c 91       	ld	r19, X
     1cc:	42 17       	cp	r20, r18
     1ce:	53 07       	cpc	r21, r19
     1d0:	b0 f7       	brcc	.-20     	; 0x1be <vListInsert+0x38>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     1d2:	a2 81       	ldd	r26, Z+2	; 0x02
     1d4:	b3 81       	ldd	r27, Z+3	; 0x03
     1d6:	bb 83       	std	Y+3, r27	; 0x03
     1d8:	aa 83       	std	Y+2, r26	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
     1da:	15 96       	adiw	r26, 0x05	; 5
     1dc:	dc 93       	st	X, r29
     1de:	ce 93       	st	-X, r28
     1e0:	14 97       	sbiw	r26, 0x04	; 4
	pxNewListItem->pxPrevious = pxIterator;
     1e2:	fd 83       	std	Y+5, r31	; 0x05
     1e4:	ec 83       	std	Y+4, r30	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
     1e6:	d3 83       	std	Z+3, r29	; 0x03
     1e8:	c2 83       	std	Z+2, r28	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     1ea:	99 87       	std	Y+9, r25	; 0x09
     1ec:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     1ee:	fc 01       	movw	r30, r24
     1f0:	20 81       	ld	r18, Z
     1f2:	2f 5f       	subi	r18, 0xFF	; 255
     1f4:	20 83       	st	Z, r18
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	08 95       	ret

000001fc <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
     1fc:	fc 01       	movw	r30, r24
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     1fe:	a2 81       	ldd	r26, Z+2	; 0x02
     200:	b3 81       	ldd	r27, Z+3	; 0x03
     202:	84 81       	ldd	r24, Z+4	; 0x04
     204:	95 81       	ldd	r25, Z+5	; 0x05
     206:	15 96       	adiw	r26, 0x05	; 5
     208:	9c 93       	st	X, r25
     20a:	8e 93       	st	-X, r24
     20c:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     20e:	a4 81       	ldd	r26, Z+4	; 0x04
     210:	b5 81       	ldd	r27, Z+5	; 0x05
     212:	82 81       	ldd	r24, Z+2	; 0x02
     214:	93 81       	ldd	r25, Z+3	; 0x03
     216:	13 96       	adiw	r26, 0x03	; 3
     218:	9c 93       	st	X, r25
     21a:	8e 93       	st	-X, r24
     21c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
     21e:	a0 85       	ldd	r26, Z+8	; 0x08
     220:	b1 85       	ldd	r27, Z+9	; 0x09

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     222:	11 96       	adiw	r26, 0x01	; 1
     224:	8d 91       	ld	r24, X+
     226:	9c 91       	ld	r25, X
     228:	12 97       	sbiw	r26, 0x02	; 2
     22a:	8e 17       	cp	r24, r30
     22c:	9f 07       	cpc	r25, r31
     22e:	31 f4       	brne	.+12     	; 0x23c <vListRemove+0x40>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     230:	84 81       	ldd	r24, Z+4	; 0x04
     232:	95 81       	ldd	r25, Z+5	; 0x05
     234:	12 96       	adiw	r26, 0x02	; 2
     236:	9c 93       	st	X, r25
     238:	8e 93       	st	-X, r24
     23a:	11 97       	sbiw	r26, 0x01	; 1
	}

	pxItemToRemove->pvContainer = NULL;
     23c:	11 86       	std	Z+9, r1	; 0x09
     23e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     240:	8c 91       	ld	r24, X
     242:	81 50       	subi	r24, 0x01	; 1
     244:	8c 93       	st	X, r24
     246:	08 95       	ret

00000248 <initUSART>:
void PollUSART_Init() {
	poll_usart_state = PollUSART_INIT;
}

void MakeDrink_Init() {
	make_drink_state = MakeDrink_INIT;
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	81 f0       	breq	.+32     	; 0x26c <initUSART+0x24>
     24c:	e1 ec       	ldi	r30, 0xC1	; 193
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	88 61       	ori	r24, 0x18	; 24
     254:	80 83       	st	Z, r24
     256:	e2 ec       	ldi	r30, 0xC2	; 194
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	86 60       	ori	r24, 0x06	; 6
     25e:	80 83       	st	Z, r24
     260:	83 e3       	ldi	r24, 0x33	; 51
     262:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     266:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     26a:	08 95       	ret
     26c:	e9 ec       	ldi	r30, 0xC9	; 201
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	88 61       	ori	r24, 0x18	; 24
     274:	80 83       	st	Z, r24
     276:	ea ec       	ldi	r30, 0xCA	; 202
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	86 60       	ori	r24, 0x06	; 6
     27e:	80 83       	st	Z, r24
     280:	83 e3       	ldi	r24, 0x33	; 51
     282:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     286:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     28a:	08 95       	ret

0000028c <USART_Flush>:
     28c:	81 30       	cpi	r24, 0x01	; 1
     28e:	29 f4       	brne	.+10     	; 0x29a <USART_Flush+0xe>
     290:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     294:	88 23       	and	r24, r24
     296:	84 f0       	brlt	.+32     	; 0x2b8 <USART_Flush+0x2c>
     298:	08 95       	ret
     29a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     29e:	88 23       	and	r24, r24
     2a0:	ac f4       	brge	.+42     	; 0x2cc <USART_Flush+0x40>
     2a2:	a6 ec       	ldi	r26, 0xC6	; 198
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e0 ec       	ldi	r30, 0xC0	; 192
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	8c 91       	ld	r24, X
     2ac:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <dummy.2320>
     2b0:	80 81       	ld	r24, Z
     2b2:	88 23       	and	r24, r24
     2b4:	d4 f3       	brlt	.-12     	; 0x2aa <USART_Flush+0x1e>
     2b6:	08 95       	ret
     2b8:	ae ec       	ldi	r26, 0xCE	; 206
     2ba:	b0 e0       	ldi	r27, 0x00	; 0
     2bc:	e8 ec       	ldi	r30, 0xC8	; 200
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	8c 91       	ld	r24, X
     2c2:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <dummy.2320>
     2c6:	80 81       	ld	r24, Z
     2c8:	88 23       	and	r24, r24
     2ca:	d4 f3       	brlt	.-12     	; 0x2c0 <USART_Flush+0x34>
     2cc:	08 95       	ret

000002ce <USART_Send>:
     2ce:	61 30       	cpi	r22, 0x01	; 1
     2d0:	41 f0       	breq	.+16     	; 0x2e2 <USART_Send+0x14>
     2d2:	e0 ec       	ldi	r30, 0xC0	; 192
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	90 81       	ld	r25, Z
     2d8:	95 ff       	sbrs	r25, 5
     2da:	fd cf       	rjmp	.-6      	; 0x2d6 <USART_Send+0x8>
     2dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     2e0:	08 95       	ret
     2e2:	e8 ec       	ldi	r30, 0xC8	; 200
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	90 81       	ld	r25, Z
     2e8:	95 ff       	sbrs	r25, 5
     2ea:	fd cf       	rjmp	.-6      	; 0x2e6 <USART_Send+0x18>
     2ec:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     2f0:	08 95       	ret

000002f2 <USART_Receive>:
     2f2:	81 30       	cpi	r24, 0x01	; 1
     2f4:	41 f0       	breq	.+16     	; 0x306 <USART_Receive+0x14>
     2f6:	e0 ec       	ldi	r30, 0xC0	; 192
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	80 81       	ld	r24, Z
     2fc:	88 23       	and	r24, r24
     2fe:	ec f7       	brge	.-6      	; 0x2fa <USART_Receive+0x8>
     300:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     304:	08 95       	ret
     306:	e8 ec       	ldi	r30, 0xC8	; 200
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	88 23       	and	r24, r24
     30e:	ec f7       	brge	.-6      	; 0x30a <USART_Receive+0x18>
     310:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     314:	08 95       	ret

00000316 <USART_Send_String>:
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	cf 93       	push	r28
     31e:	df 93       	push	r29
     320:	06 2f       	mov	r16, r22
     322:	fc 01       	movw	r30, r24
     324:	01 90       	ld	r0, Z+
     326:	00 20       	and	r0, r0
     328:	e9 f7       	brne	.-6      	; 0x324 <USART_Send_String+0xe>
     32a:	31 97       	sbiw	r30, 0x01	; 1
     32c:	1e 2f       	mov	r17, r30
     32e:	18 1b       	sub	r17, r24
     330:	51 f0       	breq	.+20     	; 0x346 <USART_Send_String+0x30>
     332:	f8 2e       	mov	r15, r24
     334:	c8 2f       	mov	r28, r24
     336:	d9 2f       	mov	r29, r25
     338:	60 2f       	mov	r22, r16
     33a:	89 91       	ld	r24, Y+
     33c:	c8 df       	rcall	.-112    	; 0x2ce <USART_Send>
     33e:	8c 2f       	mov	r24, r28
     340:	8f 19       	sub	r24, r15
     342:	81 17       	cp	r24, r17
     344:	c8 f3       	brcs	.-14     	; 0x338 <USART_Send_String+0x22>
     346:	60 2f       	mov	r22, r16
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	c1 df       	rcall	.-126    	; 0x2ce <USART_Send>
     34c:	60 2f       	mov	r22, r16
     34e:	8f ef       	ldi	r24, 0xFF	; 255
     350:	be df       	rcall	.-132    	; 0x2ce <USART_Send>
     352:	60 2f       	mov	r22, r16
     354:	8f ef       	ldi	r24, 0xFF	; 255
     356:	bb df       	rcall	.-138    	; 0x2ce <USART_Send>
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	08 95       	ret

00000364 <Rotate_Tick>:
}

void Rotate_Tick(){
	//USART_Send_String("page page1",0);
	//Actions
	switch(rotate_state){
     364:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <rotate_state>
     368:	81 30       	cpi	r24, 0x01	; 1
     36a:	49 f0       	breq	.+18     	; 0x37e <Rotate_Tick+0x1a>
     36c:	18 f0       	brcs	.+6      	; 0x374 <Rotate_Tick+0x10>
     36e:	82 30       	cpi	r24, 0x02	; 2
     370:	91 f0       	breq	.+36     	; 0x396 <Rotate_Tick+0x32>
     372:	4c c0       	rjmp	.+152    	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
		case Rotate_INIT:
			//PORTA = 0;
			rotate_stepper = 0;
     374:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <rotate_stepper>
			current_position = 0;
     378:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <current_position>
     37c:	50 c0       	rjmp	.+160    	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
			break;
		case Rotate_Wait:
			cnt = 0; //index in list of steps
     37e:	10 92 b9 07 	sts	0x07B9, r1	; 0x8007b9 <cnt>
			total_cnt = 0; //count of total number of steps
     382:	10 92 b8 07 	sts	0x07B8, r1	; 0x8007b8 <total_cnt+0x1>
     386:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <total_cnt>
			//drink = 0; //drink selected
			drink_select = ~PINB & 0x3F;
     38a:	83 b1       	in	r24, 0x03	; 3
     38c:	80 95       	com	r24
     38e:	8f 73       	andi	r24, 0x3F	; 63
     390:	80 93 b2 07 	sts	0x07B2, r24	; 0x8007b2 <drink_select>
     394:	48 c0       	rjmp	.+144    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
				//USART_Send_String(lcd_str,1);
			}
			*/
			break;
		case go_to_drink:
			if (current_position < drink) {
     396:	90 91 b6 07 	lds	r25, 0x07B6	; 0x8007b6 <current_position>
     39a:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <drink>
     39e:	98 17       	cp	r25, r24
     3a0:	c8 f4       	brcc	.+50     	; 0x3d4 <Rotate_Tick+0x70>
					//forward	
					//PORTA = forward_steps[cnt++];
					rotate_stepper = forward_steps[cnt++];
     3a2:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <cnt>
     3a6:	e8 2f       	mov	r30, r24
     3a8:	f0 e0       	ldi	r31, 0x00	; 0
     3aa:	ee 5a       	subi	r30, 0xAE	; 174
     3ac:	fe 4f       	sbci	r31, 0xFE	; 254
     3ae:	90 81       	ld	r25, Z
     3b0:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <rotate_stepper>
     3b4:	8f 5f       	subi	r24, 0xFF	; 255
					cnt %= num_steps;
     3b6:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <num_steps>
     3ba:	9c d7       	rcall	.+3896   	; 0x12f4 <__udivmodqi4>
     3bc:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <cnt>
					total_cnt++;
     3c0:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <total_cnt>
     3c4:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <total_cnt+0x1>
     3c8:	01 96       	adiw	r24, 0x01	; 1
     3ca:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <total_cnt+0x1>
     3ce:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <total_cnt>
     3d2:	8f c0       	rjmp	.+286    	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
			}	
			else if (current_position > drink) {
     3d4:	89 17       	cp	r24, r25
     3d6:	08 f0       	brcs	.+2      	; 0x3da <Rotate_Tick+0x76>
     3d8:	8c c0       	rjmp	.+280    	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
					//backward
					//PORTA = backward_steps[cnt++];
					rotate_stepper = backward_steps[cnt++];
     3da:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <cnt>
     3de:	e8 2f       	mov	r30, r24
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	e2 5b       	subi	r30, 0xB2	; 178
     3e4:	fe 4f       	sbci	r31, 0xFE	; 254
     3e6:	90 81       	ld	r25, Z
     3e8:	90 93 b1 07 	sts	0x07B1, r25	; 0x8007b1 <rotate_stepper>
     3ec:	8f 5f       	subi	r24, 0xFF	; 255
					cnt %= num_steps;
     3ee:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <num_steps>
     3f2:	80 d7       	rcall	.+3840   	; 0x12f4 <__udivmodqi4>
     3f4:	90 93 b9 07 	sts	0x07B9, r25	; 0x8007b9 <cnt>
					total_cnt++;
     3f8:	80 91 b7 07 	lds	r24, 0x07B7	; 0x8007b7 <total_cnt>
     3fc:	90 91 b8 07 	lds	r25, 0x07B8	; 0x8007b8 <total_cnt+0x1>
     400:	01 96       	adiw	r24, 0x01	; 1
     402:	90 93 b8 07 	sts	0x07B8, r25	; 0x8007b8 <total_cnt+0x1>
     406:	80 93 b7 07 	sts	0x07B7, r24	; 0x8007b7 <total_cnt>
     40a:	73 c0       	rjmp	.+230    	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
			}
			break;
		default:
			//PORTA = 0;
			rotate_stepper = 0;
     40c:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <rotate_stepper>
			break;
	}

	//Transitions
	//----------------------------
	switch(rotate_state){
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	49 f0       	breq	.+18     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     414:	20 f0       	brcs	.+8      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     416:	82 30       	cpi	r24, 0x02	; 2
     418:	09 f0       	breq	.+2      	; 0x41c <__FUSE_REGION_LENGTH__+0x1c>
     41a:	87 c0       	rjmp	.+270    	; 0x52a <__FUSE_REGION_LENGTH__+0x12a>
     41c:	6a c0       	rjmp	.+212    	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
		case Rotate_INIT:
			rotate_state = Rotate_Wait;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <rotate_state>
			break;
     424:	08 95       	ret
		case Rotate_Wait:
			if (drink_select) {
     426:	80 91 b2 07 	lds	r24, 0x07B2	; 0x8007b2 <drink_select>
     42a:	88 23       	and	r24, r24
     42c:	e9 f1       	breq	.+122    	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
				if (drink_select == 0x01) { drink = 0;}
     42e:	81 30       	cpi	r24, 0x01	; 1
     430:	19 f4       	brne	.+6      	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
     432:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <drink>
     436:	1d c0       	rjmp	.+58     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
				else if (drink_select == 0x02) { drink = 1;}
     438:	82 30       	cpi	r24, 0x02	; 2
     43a:	21 f4       	brne	.+8      	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <drink>
     442:	17 c0       	rjmp	.+46     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
				else if (drink_select == 0x04) { drink = 2;}
     444:	84 30       	cpi	r24, 0x04	; 4
     446:	21 f4       	brne	.+8      	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
     448:	82 e0       	ldi	r24, 0x02	; 2
     44a:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <drink>
     44e:	11 c0       	rjmp	.+34     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
				else if (drink_select == 0x08) { drink = 3;}
     450:	88 30       	cpi	r24, 0x08	; 8
     452:	21 f4       	brne	.+8      	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <drink>
     45a:	0b c0       	rjmp	.+22     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
				else if (drink_select == 0x10) { drink = 4;}
     45c:	80 31       	cpi	r24, 0x10	; 16
     45e:	21 f4       	brne	.+8      	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
     460:	84 e0       	ldi	r24, 0x04	; 4
     462:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <drink>
     466:	05 c0       	rjmp	.+10     	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
				else if (drink_select == 0x20) { drink = 5;}
     468:	80 32       	cpi	r24, 0x20	; 32
     46a:	19 f4       	brne	.+6      	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
     46c:	85 e0       	ldi	r24, 0x05	; 5
     46e:	80 93 b3 07 	sts	0x07B3, r24	; 0x8007b3 <drink>
				//PORTC = drink;
				steps_next_drink = abs(next_drink * (drink - current_position));
     472:	40 91 4c 01 	lds	r20, 0x014C	; 0x80014c <next_drink>
     476:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <drink>
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	20 91 b6 07 	lds	r18, 0x07B6	; 0x8007b6 <current_position>
     480:	82 1b       	sub	r24, r18
     482:	91 09       	sbc	r25, r1
     484:	48 9f       	mul	r20, r24
     486:	90 01       	movw	r18, r0
     488:	49 9f       	mul	r20, r25
     48a:	30 0d       	add	r19, r0
     48c:	11 24       	eor	r1, r1
     48e:	33 23       	and	r19, r19
     490:	1c f4       	brge	.+6      	; 0x498 <__FUSE_REGION_LENGTH__+0x98>
     492:	31 95       	neg	r19
     494:	21 95       	neg	r18
     496:	31 09       	sbc	r19, r1
     498:	30 93 b5 07 	sts	0x07B5, r19	; 0x8007b5 <steps_next_drink+0x1>
     49c:	20 93 b4 07 	sts	0x07B4, r18	; 0x8007b4 <steps_next_drink>
				rotate_state = go_to_drink;
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <rotate_state>
     4a6:	08 95       	ret
			}
			else if (rotate_flag == 0x01) {
     4a8:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <rotate_flag>
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	e9 f4       	brne	.+58     	; 0x4ea <__FUSE_REGION_LENGTH__+0xea>
					steps_next_drink = abs(next_drink * (drink - current_position));
     4b0:	40 91 b3 07 	lds	r20, 0x07B3	; 0x8007b3 <drink>
     4b4:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <next_drink>
     4b8:	84 2f       	mov	r24, r20
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	20 91 b6 07 	lds	r18, 0x07B6	; 0x8007b6 <current_position>
     4c0:	82 1b       	sub	r24, r18
     4c2:	91 09       	sbc	r25, r1
     4c4:	58 9f       	mul	r21, r24
     4c6:	90 01       	movw	r18, r0
     4c8:	59 9f       	mul	r21, r25
     4ca:	30 0d       	add	r19, r0
     4cc:	11 24       	eor	r1, r1
     4ce:	33 23       	and	r19, r19
     4d0:	1c f4       	brge	.+6      	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
     4d2:	31 95       	neg	r19
     4d4:	21 95       	neg	r18
     4d6:	31 09       	sbc	r19, r1
     4d8:	30 93 b5 07 	sts	0x07B5, r19	; 0x8007b5 <steps_next_drink+0x1>
     4dc:	20 93 b4 07 	sts	0x07B4, r18	; 0x8007b4 <steps_next_drink>
					rotate_state = go_to_drink;
     4e0:	82 e0       	ldi	r24, 0x02	; 2
     4e2:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <rotate_state>
					PORTC = drink;
     4e6:	48 b9       	out	0x08, r20	; 8
     4e8:	08 95       	ret
					//USART_Send(drink+1,1);
			}
			else {
				rotate_state = Rotate_Wait;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <rotate_state>
     4f0:	08 95       	ret
			}
			break;
		case go_to_drink:
			if (total_cnt < steps_next_drink) {
     4f2:	20 91 b7 07 	lds	r18, 0x07B7	; 0x8007b7 <total_cnt>
     4f6:	30 91 b8 07 	lds	r19, 0x07B8	; 0x8007b8 <total_cnt+0x1>
     4fa:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <steps_next_drink>
     4fe:	90 91 b5 07 	lds	r25, 0x07B5	; 0x8007b5 <steps_next_drink+0x1>
     502:	28 17       	cp	r18, r24
     504:	39 07       	cpc	r19, r25
     506:	20 f4       	brcc	.+8      	; 0x510 <__FUSE_REGION_LENGTH__+0x110>
				rotate_state = go_to_drink;
     508:	82 e0       	ldi	r24, 0x02	; 2
     50a:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <rotate_state>
     50e:	08 95       	ret
			}
			else {
				current_position = drink;
     510:	80 91 b3 07 	lds	r24, 0x07B3	; 0x8007b3 <drink>
     514:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <current_position>
				rotate_flag = 0x00;
     518:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <rotate_flag>
				rotate_state = Rotate_Wait;
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <rotate_state>
				USART_Send(current_position+1,1);
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	8f 5f       	subi	r24, 0xFF	; 255
     526:	d3 ce       	rjmp	.-602    	; 0x2ce <USART_Send>
     528:	08 95       	ret
			}
			break;
		
		default:
			rotate_state = Rotate_INIT;
     52a:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <rotate_state>
     52e:	08 95       	ret

00000530 <RotateSecTask>:
		USART_Send(0xFF,usartNum);
	}
}

void Rotate_Init(){
	rotate_state = Rotate_INIT;
     530:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <rotate_state>
}

void RotateSecTask() {
	Rotate_Init();
	for(;;) { 	
		Rotate_Tick();
     534:	17 df       	rcall	.-466    	; 0x364 <Rotate_Tick>
		vTaskDelay(6); 
     536:	86 e0       	ldi	r24, 0x06	; 6
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	1d d6       	rcall	.+3130   	; 0x1176 <vTaskDelay>
	} 
     53c:	fb cf       	rjmp	.-10     	; 0x534 <RotateSecTask+0x4>

0000053e <Dispense_Tick>:
			break;
	}
}

void Dispense_Tick(){
	switch(dispense_state){ //actions
     53e:	80 91 16 08 	lds	r24, 0x0816	; 0x800816 <dispense_state>
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	a1 f0       	breq	.+40     	; 0x56e <Dispense_Tick+0x30>
     546:	18 f4       	brcc	.+6      	; 0x54e <Dispense_Tick+0x10>
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	31 f0       	breq	.+12     	; 0x558 <Dispense_Tick+0x1a>
     54c:	4c c0       	rjmp	.+152    	; 0x5e6 <Dispense_Tick+0xa8>
     54e:	83 30       	cpi	r24, 0x03	; 3
     550:	39 f1       	breq	.+78     	; 0x5a0 <Dispense_Tick+0x62>
     552:	84 30       	cpi	r24, 0x04	; 4
     554:	79 f1       	breq	.+94     	; 0x5b4 <Dispense_Tick+0x76>
     556:	47 c0       	rjmp	.+142    	; 0x5e6 <Dispense_Tick+0xa8>
		case Dispense_INIT:
			break;
		case Dispense_Wait:
			dispense_cnt = 0;
     558:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <dispense_cnt+0x1>
     55c:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <dispense_cnt>
			dispense_index = 0;
     560:	10 92 ad 07 	sts	0x07AD, r1	; 0x8007ad <dispense_index>
			dispense_hold_cnt = 0;
     564:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <dispense_hold_cnt+0x1>
     568:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <dispense_hold_cnt>
     56c:	4f c0       	rjmp	.+158    	; 0x60c <Dispense_Tick+0xce>
			break;
		case Dispense_Up:
			linear_stepper = backward_steps[dispense_index++];
     56e:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <dispense_index>
     572:	e8 2f       	mov	r30, r24
     574:	f0 e0       	ldi	r31, 0x00	; 0
     576:	e2 5b       	subi	r30, 0xB2	; 178
     578:	fe 4f       	sbci	r31, 0xFE	; 254
     57a:	90 81       	ld	r25, Z
     57c:	90 93 b0 07 	sts	0x07B0, r25	; 0x8007b0 <linear_stepper>
     580:	8f 5f       	subi	r24, 0xFF	; 255
			dispense_index %= num_steps; 
     582:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <num_steps>
     586:	b6 d6       	rcall	.+3436   	; 0x12f4 <__udivmodqi4>
     588:	90 93 ad 07 	sts	0x07AD, r25	; 0x8007ad <dispense_index>
			dispense_cnt++;
     58c:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <dispense_cnt>
     590:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <dispense_cnt+0x1>
     594:	01 96       	adiw	r24, 0x01	; 1
     596:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <dispense_cnt+0x1>
     59a:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <dispense_cnt>
     59e:	50 c0       	rjmp	.+160    	; 0x640 <Dispense_Tick+0x102>
			break;
		case Dispense_Hold:
			dispense_hold_cnt++;
     5a0:	80 91 ab 07 	lds	r24, 0x07AB	; 0x8007ab <dispense_hold_cnt>
     5a4:	90 91 ac 07 	lds	r25, 0x07AC	; 0x8007ac <dispense_hold_cnt+0x1>
     5a8:	01 96       	adiw	r24, 0x01	; 1
     5aa:	90 93 ac 07 	sts	0x07AC, r25	; 0x8007ac <dispense_hold_cnt+0x1>
     5ae:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <dispense_hold_cnt>
     5b2:	5d c0       	rjmp	.+186    	; 0x66e <Dispense_Tick+0x130>
			break;
		case Dispense_Down:
			linear_stepper = forward_steps[dispense_index++];
     5b4:	80 91 ad 07 	lds	r24, 0x07AD	; 0x8007ad <dispense_index>
     5b8:	e8 2f       	mov	r30, r24
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	ee 5a       	subi	r30, 0xAE	; 174
     5be:	fe 4f       	sbci	r31, 0xFE	; 254
     5c0:	90 81       	ld	r25, Z
     5c2:	90 93 b0 07 	sts	0x07B0, r25	; 0x8007b0 <linear_stepper>
     5c6:	8f 5f       	subi	r24, 0xFF	; 255
			dispense_index %= num_steps;
     5c8:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <num_steps>
     5cc:	93 d6       	rcall	.+3366   	; 0x12f4 <__udivmodqi4>
     5ce:	90 93 ad 07 	sts	0x07AD, r25	; 0x8007ad <dispense_index>
			dispense_cnt++;
     5d2:	80 91 ae 07 	lds	r24, 0x07AE	; 0x8007ae <dispense_cnt>
     5d6:	90 91 af 07 	lds	r25, 0x07AF	; 0x8007af <dispense_cnt+0x1>
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	90 93 af 07 	sts	0x07AF, r25	; 0x8007af <dispense_cnt+0x1>
     5e0:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <dispense_cnt>
     5e4:	5f c0       	rjmp	.+190    	; 0x6a4 <Dispense_Tick+0x166>
			break;
		default:
			break;
	}
	switch(dispense_state){ //transition
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	59 f1       	breq	.+86     	; 0x640 <Dispense_Tick+0x102>
     5ea:	30 f4       	brcc	.+12     	; 0x5f8 <Dispense_Tick+0xba>
     5ec:	88 23       	and	r24, r24
     5ee:	51 f0       	breq	.+20     	; 0x604 <Dispense_Tick+0xc6>
     5f0:	81 30       	cpi	r24, 0x01	; 1
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <Dispense_Tick+0xb8>
     5f4:	74 c0       	rjmp	.+232    	; 0x6de <Dispense_Tick+0x1a0>
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <Dispense_Tick+0xce>
     5f8:	83 30       	cpi	r24, 0x03	; 3
     5fa:	c9 f1       	breq	.+114    	; 0x66e <Dispense_Tick+0x130>
     5fc:	84 30       	cpi	r24, 0x04	; 4
     5fe:	09 f0       	breq	.+2      	; 0x602 <Dispense_Tick+0xc4>
     600:	6e c0       	rjmp	.+220    	; 0x6de <Dispense_Tick+0x1a0>
     602:	50 c0       	rjmp	.+160    	; 0x6a4 <Dispense_Tick+0x166>
		case Dispense_INIT:
			dispense_state = Dispense_Wait;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
			break;
     60a:	08 95       	ret
		case Dispense_Wait:
			if ((~PINB & 0x40)==0x40) { // if PINB6 is set to low, dispense
     60c:	1e 99       	sbic	0x03, 6	; 3
     60e:	08 c0       	rjmp	.+16     	; 0x620 <Dispense_Tick+0xe2>
				//PORTC = 0xFF;
				dispense_state = Dispense_Up;	
     610:	82 e0       	ldi	r24, 0x02	; 2
     612:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
				dispense_cnt = 0;
     616:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <dispense_cnt+0x1>
     61a:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <dispense_cnt>
     61e:	08 95       	ret
			}
			else if (dispense_flag == 0x01) {
     620:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <dispense_flag>
     624:	81 30       	cpi	r24, 0x01	; 1
     626:	41 f4       	brne	.+16     	; 0x638 <Dispense_Tick+0xfa>
				dispense_state = Dispense_Up;
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
				dispense_cnt = 0;
     62e:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <dispense_cnt+0x1>
     632:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <dispense_cnt>
     636:	08 95       	ret
			}
			else {
				dispense_state = Dispense_Wait;
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
     63e:	08 95       	ret
			}
			break;
		case Dispense_Up:
			if (dispense_cnt >= dispense_totalcnt) {
     640:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <dispense_cnt>
     644:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <dispense_cnt+0x1>
     648:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <dispense_totalcnt>
     64c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <dispense_totalcnt+0x1>
     650:	28 17       	cp	r18, r24
     652:	39 07       	cpc	r19, r25
     654:	40 f0       	brcs	.+16     	; 0x666 <Dispense_Tick+0x128>
				dispense_state = Dispense_Hold;
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
				dispense_cnt = 0;
     65c:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <dispense_cnt+0x1>
     660:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <dispense_cnt>
     664:	08 95       	ret
			}
			else {
				dispense_state = Dispense_Up;
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
     66c:	08 95       	ret
			}
			break;
		case Dispense_Hold:
			if (dispense_hold_cnt >= dispense_hold) {
     66e:	20 91 ab 07 	lds	r18, 0x07AB	; 0x8007ab <dispense_hold_cnt>
     672:	30 91 ac 07 	lds	r19, 0x07AC	; 0x8007ac <dispense_hold_cnt+0x1>
     676:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <dispense_hold>
     67a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <dispense_hold+0x1>
     67e:	28 17       	cp	r18, r24
     680:	39 07       	cpc	r19, r25
     682:	60 f0       	brcs	.+24     	; 0x69c <Dispense_Tick+0x15e>
				dispense_state = Dispense_Down;
     684:	84 e0       	ldi	r24, 0x04	; 4
     686:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
				dispense_hold_cnt = 0;
     68a:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <dispense_hold_cnt+0x1>
     68e:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <dispense_hold_cnt>
				dispense_cnt = 0;
     692:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <dispense_cnt+0x1>
     696:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <dispense_cnt>
     69a:	08 95       	ret
			}
			else {
				dispense_state = Dispense_Hold;
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
     6a2:	08 95       	ret
			}
			break;
		case Dispense_Down:
			if (dispense_cnt >= dispense_totalcnt) {
     6a4:	20 91 ae 07 	lds	r18, 0x07AE	; 0x8007ae <dispense_cnt>
     6a8:	30 91 af 07 	lds	r19, 0x07AF	; 0x8007af <dispense_cnt+0x1>
     6ac:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <dispense_totalcnt>
     6b0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <dispense_totalcnt+0x1>
     6b4:	28 17       	cp	r18, r24
     6b6:	39 07       	cpc	r19, r25
     6b8:	70 f0       	brcs	.+28     	; 0x6d6 <Dispense_Tick+0x198>
				dispense_state = Dispense_Wait;
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
				dispense_hold_cnt = 0;
     6c0:	10 92 ac 07 	sts	0x07AC, r1	; 0x8007ac <dispense_hold_cnt+0x1>
     6c4:	10 92 ab 07 	sts	0x07AB, r1	; 0x8007ab <dispense_hold_cnt>
				dispense_cnt = 0;
     6c8:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <dispense_cnt+0x1>
     6cc:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <dispense_cnt>
				dispense_flag = 0;
     6d0:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <dispense_flag>
     6d4:	08 95       	ret
			}
			else {
				dispense_state = Dispense_Down;
     6d6:	84 e0       	ldi	r24, 0x04	; 4
     6d8:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
     6dc:	08 95       	ret
			}
			break;
		default:
			dispense_state = Dispense_Wait;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 16 08 	sts	0x0816, r24	; 0x800816 <dispense_state>
     6e4:	08 95       	ret

000006e6 <DispenseSecTask>:
void Rotate_Init(){
	rotate_state = Rotate_INIT;
}

void Dispense_Init(){
	dispense_state = Dispense_INIT;
     6e6:	10 92 16 08 	sts	0x0816, r1	; 0x800816 <dispense_state>
}

void DispenseSecTask() {
	Dispense_Init();
	for(;;) { 	
		Dispense_Tick();
     6ea:	29 df       	rcall	.-430    	; 0x53e <Dispense_Tick>
		vTaskDelay(8); 
     6ec:	88 e0       	ldi	r24, 0x08	; 8
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	42 d5       	rcall	.+2692   	; 0x1176 <vTaskDelay>
	} 
     6f2:	fb cf       	rjmp	.-10     	; 0x6ea <DispenseSecTask+0x4>

000006f4 <WritePORTA_Tick>:
		case WritePORTA_Wait:
			break;
		default:
			break;
	}
	switch (write_porta_state){ //transitions
     6f4:	80 91 18 08 	lds	r24, 0x0818	; 0x800818 <write_porta_state>
     6f8:	88 23       	and	r24, r24
     6fa:	19 f0       	breq	.+6      	; 0x702 <WritePORTA_Tick+0xe>
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	31 f0       	breq	.+12     	; 0x70c <WritePORTA_Tick+0x18>
     700:	13 c0       	rjmp	.+38     	; 0x728 <WritePORTA_Tick+0x34>
		case WritePORTA_INIT:
			PORTA = 0;
     702:	12 b8       	out	0x02, r1	; 2
			write_porta_state = WritePORTA_Wait;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <write_porta_state>
			break;
     70a:	08 95       	ret
		case WritePORTA_Wait:
			PORTA = rotate_stepper | (linear_stepper << 4);
     70c:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <linear_stepper>
     710:	20 e1       	ldi	r18, 0x10	; 16
     712:	82 9f       	mul	r24, r18
     714:	c0 01       	movw	r24, r0
     716:	11 24       	eor	r1, r1
     718:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <rotate_stepper>
     71c:	89 2b       	or	r24, r25
     71e:	82 b9       	out	0x02, r24	; 2
			write_porta_state = WritePORTA_Wait;
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <write_porta_state>
			break;
     726:	08 95       	ret
		default:
			write_porta_state = WritePORTA_Wait;
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	80 93 18 08 	sts	0x0818, r24	; 0x800818 <write_porta_state>
			PORTA = 0;
     72e:	12 b8       	out	0x02, r1	; 2
     730:	08 95       	ret

00000732 <WritePORTASecTask>:
void Dispense_Init(){
	dispense_state = Dispense_INIT;
}

void WritePORTA_Init() {
	write_porta_state = WritePORTA_INIT;
     732:	10 92 18 08 	sts	0x0818, r1	; 0x800818 <write_porta_state>
}

void WritePORTASecTask() {
	WritePORTA_Init();
	for(;;) { 	
		WritePORTA_Tick();
     736:	de df       	rcall	.-68     	; 0x6f4 <WritePORTA_Tick>
		vTaskDelay(1); 
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	1c d5       	rcall	.+2616   	; 0x1176 <vTaskDelay>
	}
     73e:	fb cf       	rjmp	.-10     	; 0x736 <WritePORTASecTask+0x4>

00000740 <PollUSART_Tick>:
			break;	
	}
}

void PollUSART_Tick() {
	switch (poll_usart_state) { //actions
     740:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <poll_usart_state>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	b1 f4       	brne	.+44     	; 0x774 <PollUSART_Tick+0x34>
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     748:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
		case PollUSART_INIT:
			break;
		case PollUSART_Wait:
			if (USART_HasReceived(0)) {
     74c:	88 23       	and	r24, r24
     74e:	14 f5       	brge	.+68     	; 0x794 <PollUSART_Tick+0x54>
				received_message = USART_Receive(0);	
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	cf dd       	rcall	.-1122   	; 0x2f2 <USART_Receive>
     754:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <received_message>
				if (received_message == 0xAA) {
     758:	8a 3a       	cpi	r24, 0xAA	; 170
     75a:	51 f4       	brne	.+20     	; 0x770 <PollUSART_Tick+0x30>
					make_drink_flag = 0x01;
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <make_drink_flag>
					drink_to_make = USART_Receive(0);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	c6 dd       	rcall	.-1140   	; 0x2f2 <USART_Receive>
     766:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <drink_to_make>
					USART_Flush(0);
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	8f dd       	rcall	.-1250   	; 0x28c <USART_Flush>
     76e:	02 c0       	rjmp	.+4      	; 0x774 <PollUSART_Tick+0x34>
				}
				else {
					make_drink_flag = 0x00;
     770:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <make_drink_flag>
			}
			break;
		default:
			break;
	}
	switch (poll_usart_state) { //transitions
     774:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <poll_usart_state>
     778:	88 23       	and	r24, r24
     77a:	19 f0       	breq	.+6      	; 0x782 <PollUSART_Tick+0x42>
     77c:	81 30       	cpi	r24, 0x01	; 1
     77e:	39 f4       	brne	.+14     	; 0x78e <PollUSART_Tick+0x4e>
     780:	08 95       	ret
		case PollUSART_INIT:
			poll_usart_state = PollUSART_Wait;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <poll_usart_state>
			received_message = 0;
     788:	10 92 aa 07 	sts	0x07AA, r1	; 0x8007aa <received_message>
			break;
     78c:	08 95       	ret
		case PollUSART_Wait:
			poll_usart_state = PollUSART_Wait;
			break;
		default:
			poll_usart_state = PollUSART_Wait;
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <poll_usart_state>
     794:	08 95       	ret

00000796 <PollUSARTSecTask>:
void WritePORTA_Init() {
	write_porta_state = WritePORTA_INIT;
}

void PollUSART_Init() {
	poll_usart_state = PollUSART_INIT;
     796:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <poll_usart_state>
}

void PollUSARTSecTask() {
	PollUSART_Init();
	for(;;) { 	
		PollUSART_Tick();
     79a:	d2 df       	rcall	.-92     	; 0x740 <PollUSART_Tick>
		vTaskDelay(1); 
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	ea d4       	rcall	.+2516   	; 0x1176 <vTaskDelay>
	}
     7a2:	fb cf       	rjmp	.-10     	; 0x79a <PollUSARTSecTask+0x4>

000007a4 <MakeDrink_Tick>:
			break;
	}
}

void MakeDrink_Tick() {
	switch (make_drink_state) { //actions
     7a4:	80 91 19 08 	lds	r24, 0x0819	; 0x800819 <make_drink_state>
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	19 f4       	brne	.+6      	; 0x7b2 <MakeDrink_Tick+0xe>
		case MakeDrink_INIT:
			break;
		case MakeDrink_Wait:
			make_drink_cnt = 0;
     7ac:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <make_drink_cnt>
     7b0:	21 c0       	rjmp	.+66     	; 0x7f4 <MakeDrink_Tick+0x50>
		case MakeDrink_Home:
			break;
		default:
			break;
	}
	switch (make_drink_state) { //transitions
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	b9 f1       	breq	.+110    	; 0x824 <MakeDrink_Tick+0x80>
     7b6:	30 f4       	brcc	.+12     	; 0x7c4 <MakeDrink_Tick+0x20>
     7b8:	88 23       	and	r24, r24
     7ba:	69 f0       	breq	.+26     	; 0x7d6 <MakeDrink_Tick+0x32>
     7bc:	81 30       	cpi	r24, 0x01	; 1
     7be:	09 f0       	breq	.+2      	; 0x7c2 <MakeDrink_Tick+0x1e>
     7c0:	87 c0       	rjmp	.+270    	; 0x8d0 <MakeDrink_Tick+0x12c>
     7c2:	18 c0       	rjmp	.+48     	; 0x7f4 <MakeDrink_Tick+0x50>
     7c4:	84 30       	cpi	r24, 0x04	; 4
     7c6:	09 f4       	brne	.+2      	; 0x7ca <MakeDrink_Tick+0x26>
     7c8:	68 c0       	rjmp	.+208    	; 0x89a <MakeDrink_Tick+0xf6>
     7ca:	08 f4       	brcc	.+2      	; 0x7ce <MakeDrink_Tick+0x2a>
     7cc:	5b c0       	rjmp	.+182    	; 0x884 <MakeDrink_Tick+0xe0>
     7ce:	85 30       	cpi	r24, 0x05	; 5
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <MakeDrink_Tick+0x30>
     7d2:	70 c0       	rjmp	.+224    	; 0x8b4 <MakeDrink_Tick+0x110>
     7d4:	7d c0       	rjmp	.+250    	; 0x8d0 <MakeDrink_Tick+0x12c>
		case MakeDrink_INIT:
			make_drink_state = MakeDrink_Wait;
     7d6:	81 e0       	ldi	r24, 0x01	; 1
     7d8:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <make_drink_state>
			make_drink_cnt = 0;
     7dc:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <make_drink_cnt>
			rotate_flag = 0;
     7e0:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <rotate_flag>
			dispense_flag = 0;
     7e4:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <dispense_flag>
			USART_Send(current_position+1,1);
     7e8:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <current_position>
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	6e cd       	rjmp	.-1316   	; 0x2ce <USART_Send>
			break;
     7f2:	08 95       	ret
		case MakeDrink_Wait:
			if (make_drink_flag == 0x01 && rotate_flag == 0 && dispense_flag == 0) {
     7f4:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <make_drink_flag>
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	81 f4       	brne	.+32     	; 0x81c <MakeDrink_Tick+0x78>
     7fc:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <rotate_flag>
     800:	81 11       	cpse	r24, r1
     802:	0c c0       	rjmp	.+24     	; 0x81c <MakeDrink_Tick+0x78>
     804:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <dispense_flag>
     808:	81 11       	cpse	r24, r1
     80a:	08 c0       	rjmp	.+16     	; 0x81c <MakeDrink_Tick+0x78>
				USART_Send_String("page page2",0);
     80c:	60 e0       	ldi	r22, 0x00	; 0
     80e:	88 e5       	ldi	r24, 0x58	; 88
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	81 dd       	rcall	.-1278   	; 0x316 <USART_Send_String>
				make_drink_state = MakeDrink;
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <make_drink_state>
     81a:	08 95       	ret
			}
			else {
				make_drink_state = MakeDrink_Wait;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <make_drink_state>
     822:	08 95       	ret
			}
			break;
		case MakeDrink:
			if (drinks[drink_to_make][make_drink_cnt]==0x01 && make_drink_cnt < 6) {
     824:	20 91 a5 07 	lds	r18, 0x07A5	; 0x8007a5 <make_drink_cnt>
     828:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <drink_to_make>
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	fc 01       	movw	r30, r24
     830:	ee 0f       	add	r30, r30
     832:	ff 1f       	adc	r31, r31
     834:	e8 0f       	add	r30, r24
     836:	f9 1f       	adc	r31, r25
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	e2 0f       	add	r30, r18
     83e:	f1 1d       	adc	r31, r1
     840:	e0 50       	subi	r30, 0x00	; 0
     842:	ff 4f       	sbci	r31, 0xFF	; 255
     844:	80 81       	ld	r24, Z
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	59 f4       	brne	.+22     	; 0x860 <MakeDrink_Tick+0xbc>
     84a:	26 30       	cpi	r18, 0x06	; 6
     84c:	58 f4       	brcc	.+22     	; 0x864 <MakeDrink_Tick+0xc0>
				make_drink_state = MakeDrink_Rotate;
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <make_drink_state>
				rotate_flag = 0x01;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <rotate_flag>
				drink = make_drink_cnt;
     85a:	20 93 b3 07 	sts	0x07B3, r18	; 0x8007b3 <drink>
     85e:	08 95       	ret
			}
			else if (make_drink_cnt >= 6) {
     860:	26 30       	cpi	r18, 0x06	; 6
     862:	48 f0       	brcs	.+18     	; 0x876 <MakeDrink_Tick+0xd2>
				//make_drink_state = MakeDrink_Wait;
				//USART_Send_String("page page0",0);
				make_drink_state = MakeDrink_Home;
     864:	85 e0       	ldi	r24, 0x05	; 5
     866:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <make_drink_state>
				//make_drink_flag = 0x00;
				rotate_flag = 0x01;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	80 93 a6 07 	sts	0x07A6, r24	; 0x8007a6 <rotate_flag>
				drink = 0;
     870:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <drink>
     874:	08 95       	ret
			}
			else {
				make_drink_cnt++;
     876:	2f 5f       	subi	r18, 0xFF	; 255
     878:	20 93 a5 07 	sts	0x07A5, r18	; 0x8007a5 <make_drink_cnt>
				make_drink_state = MakeDrink;
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <make_drink_state>
     882:	08 95       	ret
			}
			break;
		case MakeDrink_Rotate:
			if (rotate_flag == 0x00) {
     884:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <rotate_flag>
     888:	81 11       	cpse	r24, r1
     88a:	25 c0       	rjmp	.+74     	; 0x8d6 <MakeDrink_Tick+0x132>
				dispense_flag = 0x01;
     88c:	81 e0       	ldi	r24, 0x01	; 1
     88e:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <dispense_flag>
				make_drink_state = MakeDrink_Dispense;
     892:	84 e0       	ldi	r24, 0x04	; 4
     894:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <make_drink_state>
     898:	08 95       	ret
			else {
				make_drink_state = MakeDrink_Rotate;
			}
			break;
		case MakeDrink_Dispense:
			if (dispense_flag == 0x00) {// && make_drink_cnt < 6) {
     89a:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <dispense_flag>
     89e:	81 11       	cpse	r24, r1
     8a0:	1a c0       	rjmp	.+52     	; 0x8d6 <MakeDrink_Tick+0x132>
				make_drink_cnt++;
     8a2:	80 91 a5 07 	lds	r24, 0x07A5	; 0x8007a5 <make_drink_cnt>
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	80 93 a5 07 	sts	0x07A5, r24	; 0x8007a5 <make_drink_cnt>
				make_drink_state = MakeDrink;
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <make_drink_state>
     8b2:	08 95       	ret
			else {
				make_drink_state = MakeDrink_Dispense;
			}
			break;
		case MakeDrink_Home:
			if (rotate_flag == 0x00) {
     8b4:	80 91 a6 07 	lds	r24, 0x07A6	; 0x8007a6 <rotate_flag>
     8b8:	81 11       	cpse	r24, r1
     8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <MakeDrink_Tick+0x132>
				make_drink_flag = 0x00;
     8bc:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <make_drink_flag>
				USART_Send_String("page page0",0);
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	83 e6       	ldi	r24, 0x63	; 99
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	27 dd       	rcall	.-1458   	; 0x316 <USART_Send_String>
				make_drink_state = MakeDrink_Wait;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <make_drink_state>
     8ce:	08 95       	ret
			else {
				make_drink_state = MakeDrink_Home;
			}
			break;
		default:
			make_drink_state = MakeDrink_Wait;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	80 93 19 08 	sts	0x0819, r24	; 0x800819 <make_drink_state>
     8d6:	08 95       	ret

000008d8 <MakeDrinkSecTask>:
void PollUSART_Init() {
	poll_usart_state = PollUSART_INIT;
}

void MakeDrink_Init() {
	make_drink_state = MakeDrink_INIT;
     8d8:	10 92 19 08 	sts	0x0819, r1	; 0x800819 <make_drink_state>
}

void MakeDrinkSecTask() {
	MakeDrink_Init();
	for(;;) { 	
		MakeDrink_Tick();
     8dc:	63 df       	rcall	.-314    	; 0x7a4 <MakeDrink_Tick>
		vTaskDelay(1); 
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	49 d4       	rcall	.+2194   	; 0x1176 <vTaskDelay>
	}
     8e4:	fb cf       	rjmp	.-10     	; 0x8dc <MakeDrinkSecTask+0x4>

000008e6 <StartSecPulse>:
}

void StartSecPulse(unsigned portBASE_TYPE Priority) {
     8e6:	af 92       	push	r10
     8e8:	bf 92       	push	r11
     8ea:	cf 92       	push	r12
     8ec:	df 92       	push	r13
     8ee:	ef 92       	push	r14
     8f0:	ff 92       	push	r15
     8f2:	0f 93       	push	r16
     8f4:	cf 93       	push	r28
	xTaskCreate(RotateSecTask, (signed portCHAR *)"RotateSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     8f6:	a1 2c       	mov	r10, r1
     8f8:	b1 2c       	mov	r11, r1
     8fa:	c1 2c       	mov	r12, r1
     8fc:	d1 2c       	mov	r13, r1
     8fe:	e1 2c       	mov	r14, r1
     900:	f1 2c       	mov	r15, r1
     902:	08 2f       	mov	r16, r24
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	45 e5       	ldi	r20, 0x55	; 85
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	6e e6       	ldi	r22, 0x6E	; 110
     90e:	71 e0       	ldi	r23, 0x01	; 1
     910:	88 e9       	ldi	r24, 0x98	; 152
     912:	92 e0       	ldi	r25, 0x02	; 2
     914:	cc d1       	rcall	.+920    	; 0xcae <xTaskGenericCreate>
	xTaskCreate(DispenseSecTask, (signed portCHAR *)"DispenseSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	45 e5       	ldi	r20, 0x55	; 85
     91c:	50 e0       	ldi	r21, 0x00	; 0
     91e:	6c e7       	ldi	r22, 0x7C	; 124
     920:	71 e0       	ldi	r23, 0x01	; 1
     922:	83 e7       	ldi	r24, 0x73	; 115
     924:	93 e0       	ldi	r25, 0x03	; 3
     926:	c3 d1       	rcall	.+902    	; 0xcae <xTaskGenericCreate>
	xTaskCreate(WritePORTASecTask, (signed portCHAR *)"WritePORTASecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	45 e5       	ldi	r20, 0x55	; 85
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	6c e8       	ldi	r22, 0x8C	; 140
     932:	71 e0       	ldi	r23, 0x01	; 1
     934:	89 e9       	ldi	r24, 0x99	; 153
     936:	93 e0       	ldi	r25, 0x03	; 3
     938:	ba d1       	rcall	.+884    	; 0xcae <xTaskGenericCreate>
	xTaskCreate(PollUSARTSecTask, (signed portCHAR *)"PollUSARTSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	45 e5       	ldi	r20, 0x55	; 85
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	6e e9       	ldi	r22, 0x9E	; 158
     944:	71 e0       	ldi	r23, 0x01	; 1
     946:	8b ec       	ldi	r24, 0xCB	; 203
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	b1 d1       	rcall	.+866    	; 0xcae <xTaskGenericCreate>
	xTaskCreate(MakeDrinkSecTask, (signed portCHAR *)"MakeDrinkSecTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	45 e5       	ldi	r20, 0x55	; 85
     952:	50 e0       	ldi	r21, 0x00	; 0
     954:	6f ea       	ldi	r22, 0xAF	; 175
     956:	71 e0       	ldi	r23, 0x01	; 1
     958:	8c e6       	ldi	r24, 0x6C	; 108
     95a:	94 e0       	ldi	r25, 0x04	; 4
     95c:	a8 d1       	rcall	.+848    	; 0xcae <xTaskGenericCreate>
}
     95e:	cf 91       	pop	r28
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	df 90       	pop	r13
     968:	cf 90       	pop	r12
     96a:	bf 90       	pop	r11
     96c:	af 90       	pop	r10
     96e:	08 95       	ret

00000970 <main>:

int main(void) { 
	DDRA = 0xFF; PORTA = 0x00;//Set PORTA as output
     970:	8f ef       	ldi	r24, 0xFF	; 255
     972:	81 b9       	out	0x01, r24	; 1
     974:	12 b8       	out	0x02, r1	; 2
	DDRB = 0x00; PORTB = 0xFF;//Set PORTB as input
     976:	14 b8       	out	0x04, r1	; 4
     978:	85 b9       	out	0x05, r24	; 5
	DDRC = 0xFF; PORTC = 0x00;//Set PORTA as output
     97a:	87 b9       	out	0x07, r24	; 7
     97c:	18 b8       	out	0x08, r1	; 8
	
	initUSART(0);
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	63 dc       	rcall	.-1850   	; 0x248 <initUSART>
	initUSART(1);
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	61 dc       	rcall	.-1854   	; 0x248 <initUSART>
	//USART_Send(current_position+1,1);
	//Start Tasks  
	StartSecPulse(1);
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	ae df       	rcall	.-164    	; 0x8e6 <StartSecPulse>
	//RunSchedular 
	vTaskStartScheduler(); 
     98a:	84 d2       	rcall	.+1288   	; 0xe94 <vTaskStartScheduler>
 
	return 0; 
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	08 95       	ret

00000992 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     992:	31 e1       	ldi	r19, 0x11	; 17
     994:	fc 01       	movw	r30, r24
     996:	30 83       	st	Z, r19
     998:	31 97       	sbiw	r30, 0x01	; 1
     99a:	22 e2       	ldi	r18, 0x22	; 34
     99c:	20 83       	st	Z, r18
     99e:	31 97       	sbiw	r30, 0x01	; 1
     9a0:	a3 e3       	ldi	r26, 0x33	; 51
     9a2:	a0 83       	st	Z, r26
     9a4:	31 97       	sbiw	r30, 0x01	; 1
     9a6:	60 83       	st	Z, r22
     9a8:	31 97       	sbiw	r30, 0x01	; 1
     9aa:	70 83       	st	Z, r23
     9ac:	31 97       	sbiw	r30, 0x01	; 1
     9ae:	10 82       	st	Z, r1
     9b0:	31 97       	sbiw	r30, 0x01	; 1
     9b2:	60 e8       	ldi	r22, 0x80	; 128
     9b4:	60 83       	st	Z, r22
     9b6:	31 97       	sbiw	r30, 0x01	; 1
     9b8:	10 82       	st	Z, r1
     9ba:	31 97       	sbiw	r30, 0x01	; 1
     9bc:	62 e0       	ldi	r22, 0x02	; 2
     9be:	60 83       	st	Z, r22
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	63 e0       	ldi	r22, 0x03	; 3
     9c4:	60 83       	st	Z, r22
     9c6:	31 97       	sbiw	r30, 0x01	; 1
     9c8:	64 e0       	ldi	r22, 0x04	; 4
     9ca:	60 83       	st	Z, r22
     9cc:	31 97       	sbiw	r30, 0x01	; 1
     9ce:	65 e0       	ldi	r22, 0x05	; 5
     9d0:	60 83       	st	Z, r22
     9d2:	31 97       	sbiw	r30, 0x01	; 1
     9d4:	66 e0       	ldi	r22, 0x06	; 6
     9d6:	60 83       	st	Z, r22
     9d8:	31 97       	sbiw	r30, 0x01	; 1
     9da:	67 e0       	ldi	r22, 0x07	; 7
     9dc:	60 83       	st	Z, r22
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	68 e0       	ldi	r22, 0x08	; 8
     9e2:	60 83       	st	Z, r22
     9e4:	31 97       	sbiw	r30, 0x01	; 1
     9e6:	69 e0       	ldi	r22, 0x09	; 9
     9e8:	60 83       	st	Z, r22
     9ea:	31 97       	sbiw	r30, 0x01	; 1
     9ec:	60 e1       	ldi	r22, 0x10	; 16
     9ee:	60 83       	st	Z, r22
     9f0:	31 97       	sbiw	r30, 0x01	; 1
     9f2:	30 83       	st	Z, r19
     9f4:	31 97       	sbiw	r30, 0x01	; 1
     9f6:	32 e1       	ldi	r19, 0x12	; 18
     9f8:	30 83       	st	Z, r19
     9fa:	31 97       	sbiw	r30, 0x01	; 1
     9fc:	33 e1       	ldi	r19, 0x13	; 19
     9fe:	30 83       	st	Z, r19
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	34 e1       	ldi	r19, 0x14	; 20
     a04:	30 83       	st	Z, r19
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	35 e1       	ldi	r19, 0x15	; 21
     a0a:	30 83       	st	Z, r19
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	36 e1       	ldi	r19, 0x16	; 22
     a10:	30 83       	st	Z, r19
     a12:	31 97       	sbiw	r30, 0x01	; 1
     a14:	37 e1       	ldi	r19, 0x17	; 23
     a16:	30 83       	st	Z, r19
     a18:	31 97       	sbiw	r30, 0x01	; 1
     a1a:	38 e1       	ldi	r19, 0x18	; 24
     a1c:	30 83       	st	Z, r19
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	39 e1       	ldi	r19, 0x19	; 25
     a22:	30 83       	st	Z, r19
     a24:	31 97       	sbiw	r30, 0x01	; 1
     a26:	30 e2       	ldi	r19, 0x20	; 32
     a28:	30 83       	st	Z, r19
     a2a:	31 97       	sbiw	r30, 0x01	; 1
     a2c:	31 e2       	ldi	r19, 0x21	; 33
     a2e:	30 83       	st	Z, r19
     a30:	31 97       	sbiw	r30, 0x01	; 1
     a32:	20 83       	st	Z, r18
     a34:	31 97       	sbiw	r30, 0x01	; 1
     a36:	23 e2       	ldi	r18, 0x23	; 35
     a38:	20 83       	st	Z, r18
     a3a:	31 97       	sbiw	r30, 0x01	; 1
     a3c:	40 83       	st	Z, r20
     a3e:	31 97       	sbiw	r30, 0x01	; 1
     a40:	50 83       	st	Z, r21
     a42:	31 97       	sbiw	r30, 0x01	; 1
     a44:	26 e2       	ldi	r18, 0x26	; 38
     a46:	20 83       	st	Z, r18
     a48:	31 97       	sbiw	r30, 0x01	; 1
     a4a:	27 e2       	ldi	r18, 0x27	; 39
     a4c:	20 83       	st	Z, r18
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	28 e2       	ldi	r18, 0x28	; 40
     a52:	20 83       	st	Z, r18
     a54:	31 97       	sbiw	r30, 0x01	; 1
     a56:	29 e2       	ldi	r18, 0x29	; 41
     a58:	20 83       	st	Z, r18
     a5a:	31 97       	sbiw	r30, 0x01	; 1
     a5c:	20 e3       	ldi	r18, 0x30	; 48
     a5e:	20 83       	st	Z, r18
     a60:	31 97       	sbiw	r30, 0x01	; 1
     a62:	21 e3       	ldi	r18, 0x31	; 49
     a64:	20 83       	st	Z, r18
     a66:	86 97       	sbiw	r24, 0x26	; 38
     a68:	08 95       	ret

00000a6a <xPortStartScheduler>:
     a6a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a6e:	8c e7       	ldi	r24, 0x7C	; 124
     a70:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a74:	8b e0       	ldi	r24, 0x0B	; 11
     a76:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     a7a:	ef e6       	ldi	r30, 0x6F	; 111
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	80 81       	ld	r24, Z
     a80:	82 60       	ori	r24, 0x02	; 2
     a82:	80 83       	st	Z, r24
     a84:	a0 91 12 08 	lds	r26, 0x0812	; 0x800812 <pxCurrentTCB>
     a88:	b0 91 13 08 	lds	r27, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     a8c:	cd 91       	ld	r28, X+
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	dd 91       	ld	r29, X+
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	ff 91       	pop	r31
     a96:	ef 91       	pop	r30
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	bf 91       	pop	r27
     a9e:	af 91       	pop	r26
     aa0:	9f 91       	pop	r25
     aa2:	8f 91       	pop	r24
     aa4:	7f 91       	pop	r23
     aa6:	6f 91       	pop	r22
     aa8:	5f 91       	pop	r21
     aaa:	4f 91       	pop	r20
     aac:	3f 91       	pop	r19
     aae:	2f 91       	pop	r18
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	bf 90       	pop	r11
     abe:	af 90       	pop	r10
     ac0:	9f 90       	pop	r9
     ac2:	8f 90       	pop	r8
     ac4:	7f 90       	pop	r7
     ac6:	6f 90       	pop	r6
     ac8:	5f 90       	pop	r5
     aca:	4f 90       	pop	r4
     acc:	3f 90       	pop	r3
     ace:	2f 90       	pop	r2
     ad0:	1f 90       	pop	r1
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	08 95       	ret
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	08 95       	ret

00000ade <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     ade:	0f 92       	push	r0
     ae0:	0f b6       	in	r0, 0x3f	; 63
     ae2:	f8 94       	cli
     ae4:	0f 92       	push	r0
     ae6:	1f 92       	push	r1
     ae8:	11 24       	eor	r1, r1
     aea:	2f 92       	push	r2
     aec:	3f 92       	push	r3
     aee:	4f 92       	push	r4
     af0:	5f 92       	push	r5
     af2:	6f 92       	push	r6
     af4:	7f 92       	push	r7
     af6:	8f 92       	push	r8
     af8:	9f 92       	push	r9
     afa:	af 92       	push	r10
     afc:	bf 92       	push	r11
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	2f 93       	push	r18
     b0c:	3f 93       	push	r19
     b0e:	4f 93       	push	r20
     b10:	5f 93       	push	r21
     b12:	6f 93       	push	r22
     b14:	7f 93       	push	r23
     b16:	8f 93       	push	r24
     b18:	9f 93       	push	r25
     b1a:	af 93       	push	r26
     b1c:	bf 93       	push	r27
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	ef 93       	push	r30
     b24:	ff 93       	push	r31
     b26:	a0 91 12 08 	lds	r26, 0x0812	; 0x800812 <pxCurrentTCB>
     b2a:	b0 91 13 08 	lds	r27, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     b2e:	0d b6       	in	r0, 0x3d	; 61
     b30:	0d 92       	st	X+, r0
     b32:	0e b6       	in	r0, 0x3e	; 62
     b34:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     b36:	72 d3       	rcall	.+1764   	; 0x121c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     b38:	a0 91 12 08 	lds	r26, 0x0812	; 0x800812 <pxCurrentTCB>
     b3c:	b0 91 13 08 	lds	r27, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     b40:	cd 91       	ld	r28, X+
     b42:	cd bf       	out	0x3d, r28	; 61
     b44:	dd 91       	ld	r29, X+
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	7f 91       	pop	r23
     b5a:	6f 91       	pop	r22
     b5c:	5f 91       	pop	r21
     b5e:	4f 91       	pop	r20
     b60:	3f 91       	pop	r19
     b62:	2f 91       	pop	r18
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	bf 90       	pop	r11
     b72:	af 90       	pop	r10
     b74:	9f 90       	pop	r9
     b76:	8f 90       	pop	r8
     b78:	7f 90       	pop	r7
     b7a:	6f 90       	pop	r6
     b7c:	5f 90       	pop	r5
     b7e:	4f 90       	pop	r4
     b80:	3f 90       	pop	r3
     b82:	2f 90       	pop	r2
     b84:	1f 90       	pop	r1
     b86:	0f 90       	pop	r0
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     b8c:	08 95       	ret

00000b8e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     b8e:	0f 92       	push	r0
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	0f 92       	push	r0
     b96:	1f 92       	push	r1
     b98:	11 24       	eor	r1, r1
     b9a:	2f 92       	push	r2
     b9c:	3f 92       	push	r3
     b9e:	4f 92       	push	r4
     ba0:	5f 92       	push	r5
     ba2:	6f 92       	push	r6
     ba4:	7f 92       	push	r7
     ba6:	8f 92       	push	r8
     ba8:	9f 92       	push	r9
     baa:	af 92       	push	r10
     bac:	bf 92       	push	r11
     bae:	cf 92       	push	r12
     bb0:	df 92       	push	r13
     bb2:	ef 92       	push	r14
     bb4:	ff 92       	push	r15
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	2f 93       	push	r18
     bbc:	3f 93       	push	r19
     bbe:	4f 93       	push	r20
     bc0:	5f 93       	push	r21
     bc2:	6f 93       	push	r22
     bc4:	7f 93       	push	r23
     bc6:	8f 93       	push	r24
     bc8:	9f 93       	push	r25
     bca:	af 93       	push	r26
     bcc:	bf 93       	push	r27
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	ef 93       	push	r30
     bd4:	ff 93       	push	r31
     bd6:	a0 91 12 08 	lds	r26, 0x0812	; 0x800812 <pxCurrentTCB>
     bda:	b0 91 13 08 	lds	r27, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     bde:	0d b6       	in	r0, 0x3d	; 61
     be0:	0d 92       	st	X+, r0
     be2:	0e b6       	in	r0, 0x3e	; 62
     be4:	0d 92       	st	X+, r0
	vTaskIncrementTick();
     be6:	85 d1       	rcall	.+778    	; 0xef2 <vTaskIncrementTick>
	vTaskSwitchContext();
     be8:	19 d3       	rcall	.+1586   	; 0x121c <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     bea:	a0 91 12 08 	lds	r26, 0x0812	; 0x800812 <pxCurrentTCB>
     bee:	b0 91 13 08 	lds	r27, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     bf2:	cd 91       	ld	r28, X+
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	dd 91       	ld	r29, X+
     bf8:	de bf       	out	0x3e, r29	; 62
     bfa:	ff 91       	pop	r31
     bfc:	ef 91       	pop	r30
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	bf 91       	pop	r27
     c04:	af 91       	pop	r26
     c06:	9f 91       	pop	r25
     c08:	8f 91       	pop	r24
     c0a:	7f 91       	pop	r23
     c0c:	6f 91       	pop	r22
     c0e:	5f 91       	pop	r21
     c10:	4f 91       	pop	r20
     c12:	3f 91       	pop	r19
     c14:	2f 91       	pop	r18
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	df 90       	pop	r13
     c20:	cf 90       	pop	r12
     c22:	bf 90       	pop	r11
     c24:	af 90       	pop	r10
     c26:	9f 90       	pop	r9
     c28:	8f 90       	pop	r8
     c2a:	7f 90       	pop	r7
     c2c:	6f 90       	pop	r6
     c2e:	5f 90       	pop	r5
     c30:	4f 90       	pop	r4
     c32:	3f 90       	pop	r3
     c34:	2f 90       	pop	r2
     c36:	1f 90       	pop	r1
     c38:	0f 90       	pop	r0
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	0f 90       	pop	r0

	asm volatile ( "ret" );
     c3e:	08 95       	ret

00000c40 <__vector_13>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     c40:	a6 df       	rcall	.-180    	; 0xb8e <vPortYieldFromTick>
		asm volatile ( "reti" );
     c42:	18 95       	reti

00000c44 <prvAddCurrentTaskToDelayedList>:
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
		}
	}
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	ec 01       	movw	r28, r24
     c4a:	e0 91 12 08 	lds	r30, 0x0812	; 0x800812 <pxCurrentTCB>
     c4e:	f0 91 13 08 	lds	r31, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     c52:	93 83       	std	Z+3, r25	; 0x03
     c54:	82 83       	std	Z+2, r24	; 0x02
     c56:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <xTickCount>
     c5a:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <xTickCount+0x1>
     c5e:	c8 17       	cp	r28, r24
     c60:	d9 07       	cpc	r29, r25
     c62:	60 f4       	brcc	.+24     	; 0xc7c <prvAddCurrentTaskToDelayedList+0x38>
     c64:	60 91 12 08 	lds	r22, 0x0812	; 0x800812 <pxCurrentTCB>
     c68:	70 91 13 08 	lds	r23, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     c6c:	80 91 d8 07 	lds	r24, 0x07D8	; 0x8007d8 <pxOverflowDelayedTaskList>
     c70:	90 91 d9 07 	lds	r25, 0x07D9	; 0x8007d9 <pxOverflowDelayedTaskList+0x1>
     c74:	6e 5f       	subi	r22, 0xFE	; 254
     c76:	7f 4f       	sbci	r23, 0xFF	; 255
     c78:	86 da       	rcall	.-2804   	; 0x186 <vListInsert>
     c7a:	16 c0       	rjmp	.+44     	; 0xca8 <prvAddCurrentTaskToDelayedList+0x64>
     c7c:	60 91 12 08 	lds	r22, 0x0812	; 0x800812 <pxCurrentTCB>
     c80:	70 91 13 08 	lds	r23, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     c84:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <pxDelayedTaskList>
     c88:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
     c8c:	6e 5f       	subi	r22, 0xFE	; 254
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	7a da       	rcall	.-2828   	; 0x186 <vListInsert>
     c92:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <xNextTaskUnblockTime>
     c96:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <xNextTaskUnblockTime+0x1>
     c9a:	c8 17       	cp	r28, r24
     c9c:	d9 07       	cpc	r29, r25
     c9e:	20 f4       	brcc	.+8      	; 0xca8 <prvAddCurrentTaskToDelayedList+0x64>
     ca0:	d0 93 57 01 	sts	0x0157, r29	; 0x800157 <xNextTaskUnblockTime+0x1>
     ca4:	c0 93 56 01 	sts	0x0156, r28	; 0x800156 <xNextTaskUnblockTime>
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	08 95       	ret

00000cae <xTaskGenericCreate>:
     cae:	4f 92       	push	r4
     cb0:	5f 92       	push	r5
     cb2:	6f 92       	push	r6
     cb4:	7f 92       	push	r7
     cb6:	8f 92       	push	r8
     cb8:	9f 92       	push	r9
     cba:	af 92       	push	r10
     cbc:	bf 92       	push	r11
     cbe:	cf 92       	push	r12
     cc0:	df 92       	push	r13
     cc2:	ef 92       	push	r14
     cc4:	ff 92       	push	r15
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
     cca:	cf 93       	push	r28
     ccc:	df 93       	push	r29
     cce:	5c 01       	movw	r10, r24
     cd0:	4b 01       	movw	r8, r22
     cd2:	3a 01       	movw	r6, r20
     cd4:	29 01       	movw	r4, r18
     cd6:	81 e2       	ldi	r24, 0x21	; 33
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	f7 d9       	rcall	.-3090   	; 0xca <pvPortMalloc>
     cdc:	ec 01       	movw	r28, r24
     cde:	89 2b       	or	r24, r25
     ce0:	09 f4       	brne	.+2      	; 0xce4 <xTaskGenericCreate+0x36>
     ce2:	c6 c0       	rjmp	.+396    	; 0xe70 <xTaskGenericCreate+0x1c2>
     ce4:	c1 14       	cp	r12, r1
     ce6:	d1 04       	cpc	r13, r1
     ce8:	09 f0       	breq	.+2      	; 0xcec <xTaskGenericCreate+0x3e>
     cea:	be c0       	rjmp	.+380    	; 0xe68 <xTaskGenericCreate+0x1ba>
     cec:	c3 01       	movw	r24, r6
     cee:	ed d9       	rcall	.-3110   	; 0xca <pvPortMalloc>
     cf0:	98 8f       	std	Y+24, r25	; 0x18
     cf2:	8f 8b       	std	Y+23, r24	; 0x17
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	19 f4       	brne	.+6      	; 0xcfe <xTaskGenericCreate+0x50>
     cf8:	ce 01       	movw	r24, r28
     cfa:	0b da       	rcall	.-3050   	; 0x112 <vPortFree>
     cfc:	b9 c0       	rjmp	.+370    	; 0xe70 <xTaskGenericCreate+0x1c2>
     cfe:	a3 01       	movw	r20, r6
     d00:	65 ea       	ldi	r22, 0xA5	; 165
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	03 d3       	rcall	.+1542   	; 0x130c <memset>
     d06:	93 01       	movw	r18, r6
     d08:	21 50       	subi	r18, 0x01	; 1
     d0a:	31 09       	sbc	r19, r1
     d0c:	8f 89       	ldd	r24, Y+23	; 0x17
     d0e:	98 8d       	ldd	r25, Y+24	; 0x18
     d10:	3c 01       	movw	r6, r24
     d12:	62 0e       	add	r6, r18
     d14:	73 1e       	adc	r7, r19
     d16:	48 e0       	ldi	r20, 0x08	; 8
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	b4 01       	movw	r22, r8
     d1c:	ce 01       	movw	r24, r28
     d1e:	49 96       	adiw	r24, 0x19	; 25
     d20:	fc d2       	rcall	.+1528   	; 0x131a <strncpy>
     d22:	18 a2       	std	Y+32, r1	; 0x20
     d24:	10 2f       	mov	r17, r16
     d26:	04 30       	cpi	r16, 0x04	; 4
     d28:	08 f0       	brcs	.+2      	; 0xd2c <xTaskGenericCreate+0x7e>
     d2a:	13 e0       	ldi	r17, 0x03	; 3
     d2c:	1e 8b       	std	Y+22, r17	; 0x16
     d2e:	6e 01       	movw	r12, r28
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	c8 0e       	add	r12, r24
     d34:	d1 1c       	adc	r13, r1
     d36:	c6 01       	movw	r24, r12
     d38:	fb d9       	rcall	.-3082   	; 0x130 <vListInitialiseItem>
     d3a:	ce 01       	movw	r24, r28
     d3c:	0c 96       	adiw	r24, 0x0c	; 12
     d3e:	f8 d9       	rcall	.-3088   	; 0x130 <vListInitialiseItem>
     d40:	d9 87       	std	Y+9, r29	; 0x09
     d42:	c8 87       	std	Y+8, r28	; 0x08
     d44:	84 e0       	ldi	r24, 0x04	; 4
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	81 1b       	sub	r24, r17
     d4a:	91 09       	sbc	r25, r1
     d4c:	9d 87       	std	Y+13, r25	; 0x0d
     d4e:	8c 87       	std	Y+12, r24	; 0x0c
     d50:	db 8b       	std	Y+19, r29	; 0x13
     d52:	ca 8b       	std	Y+18, r28	; 0x12
     d54:	a2 01       	movw	r20, r4
     d56:	b5 01       	movw	r22, r10
     d58:	c3 01       	movw	r24, r6
     d5a:	1b de       	rcall	.-970    	; 0x992 <pxPortInitialiseStack>
     d5c:	99 83       	std	Y+1, r25	; 0x01
     d5e:	88 83       	st	Y, r24
     d60:	e1 14       	cp	r14, r1
     d62:	f1 04       	cpc	r15, r1
     d64:	19 f0       	breq	.+6      	; 0xd6c <xTaskGenericCreate+0xbe>
     d66:	f7 01       	movw	r30, r14
     d68:	d1 83       	std	Z+1, r29	; 0x01
     d6a:	c0 83       	st	Z, r28
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	f8 94       	cli
     d70:	0f 92       	push	r0
     d72:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <uxCurrentNumberOfTasks>
     d76:	8f 5f       	subi	r24, 0xFF	; 255
     d78:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <uxCurrentNumberOfTasks>
     d7c:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <pxCurrentTCB>
     d80:	90 91 13 08 	lds	r25, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     d84:	89 2b       	or	r24, r25
     d86:	69 f5       	brne	.+90     	; 0xde2 <xTaskGenericCreate+0x134>
     d88:	d0 93 13 08 	sts	0x0813, r29	; 0x800813 <pxCurrentTCB+0x1>
     d8c:	c0 93 12 08 	sts	0x0812, r28	; 0x800812 <pxCurrentTCB>
     d90:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <uxCurrentNumberOfTasks>
     d94:	81 30       	cpi	r24, 0x01	; 1
     d96:	a1 f5       	brne	.+104    	; 0xe00 <xTaskGenericCreate+0x152>
     d98:	8e ee       	ldi	r24, 0xEE	; 238
     d9a:	97 e0       	ldi	r25, 0x07	; 7
     d9c:	bb d9       	rcall	.-3210   	; 0x114 <vListInitialise>
     d9e:	87 ef       	ldi	r24, 0xF7	; 247
     da0:	97 e0       	ldi	r25, 0x07	; 7
     da2:	b8 d9       	rcall	.-3216   	; 0x114 <vListInitialise>
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	98 e0       	ldi	r25, 0x08	; 8
     da8:	b5 d9       	rcall	.-3222   	; 0x114 <vListInitialise>
     daa:	89 e0       	ldi	r24, 0x09	; 9
     dac:	98 e0       	ldi	r25, 0x08	; 8
     dae:	b2 d9       	rcall	.-3228   	; 0x114 <vListInitialise>
     db0:	85 ee       	ldi	r24, 0xE5	; 229
     db2:	97 e0       	ldi	r25, 0x07	; 7
     db4:	af d9       	rcall	.-3234   	; 0x114 <vListInitialise>
     db6:	8c ed       	ldi	r24, 0xDC	; 220
     db8:	97 e0       	ldi	r25, 0x07	; 7
     dba:	ac d9       	rcall	.-3240   	; 0x114 <vListInitialise>
     dbc:	8f ec       	ldi	r24, 0xCF	; 207
     dbe:	97 e0       	ldi	r25, 0x07	; 7
     dc0:	a9 d9       	rcall	.-3246   	; 0x114 <vListInitialise>
     dc2:	86 ec       	ldi	r24, 0xC6	; 198
     dc4:	97 e0       	ldi	r25, 0x07	; 7
     dc6:	a6 d9       	rcall	.-3252   	; 0x114 <vListInitialise>
     dc8:	85 ee       	ldi	r24, 0xE5	; 229
     dca:	97 e0       	ldi	r25, 0x07	; 7
     dcc:	90 93 db 07 	sts	0x07DB, r25	; 0x8007db <pxDelayedTaskList+0x1>
     dd0:	80 93 da 07 	sts	0x07DA, r24	; 0x8007da <pxDelayedTaskList>
     dd4:	8c ed       	ldi	r24, 0xDC	; 220
     dd6:	97 e0       	ldi	r25, 0x07	; 7
     dd8:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <pxOverflowDelayedTaskList+0x1>
     ddc:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <pxOverflowDelayedTaskList>
     de0:	0f c0       	rjmp	.+30     	; 0xe00 <xTaskGenericCreate+0x152>
     de2:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <xSchedulerRunning>
     de6:	81 11       	cpse	r24, r1
     de8:	0b c0       	rjmp	.+22     	; 0xe00 <xTaskGenericCreate+0x152>
     dea:	e0 91 12 08 	lds	r30, 0x0812	; 0x800812 <pxCurrentTCB>
     dee:	f0 91 13 08 	lds	r31, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     df2:	86 89       	ldd	r24, Z+22	; 0x16
     df4:	08 17       	cp	r16, r24
     df6:	20 f0       	brcs	.+8      	; 0xe00 <xTaskGenericCreate+0x152>
     df8:	d0 93 13 08 	sts	0x0813, r29	; 0x800813 <pxCurrentTCB+0x1>
     dfc:	c0 93 12 08 	sts	0x0812, r28	; 0x800812 <pxCurrentTCB>
     e00:	8e 89       	ldd	r24, Y+22	; 0x16
     e02:	90 91 c1 07 	lds	r25, 0x07C1	; 0x8007c1 <uxTopUsedPriority>
     e06:	98 17       	cp	r25, r24
     e08:	10 f4       	brcc	.+4      	; 0xe0e <xTaskGenericCreate+0x160>
     e0a:	80 93 c1 07 	sts	0x07C1, r24	; 0x8007c1 <uxTopUsedPriority>
     e0e:	90 91 ba 07 	lds	r25, 0x07BA	; 0x8007ba <uxTaskNumber>
     e12:	9f 5f       	subi	r25, 0xFF	; 255
     e14:	90 93 ba 07 	sts	0x07BA, r25	; 0x8007ba <uxTaskNumber>
     e18:	90 91 c0 07 	lds	r25, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
     e1c:	98 17       	cp	r25, r24
     e1e:	10 f4       	brcc	.+4      	; 0xe24 <xTaskGenericCreate+0x176>
     e20:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9c 01       	movw	r18, r24
     e28:	22 0f       	add	r18, r18
     e2a:	33 1f       	adc	r19, r19
     e2c:	22 0f       	add	r18, r18
     e2e:	33 1f       	adc	r19, r19
     e30:	22 0f       	add	r18, r18
     e32:	33 1f       	adc	r19, r19
     e34:	82 0f       	add	r24, r18
     e36:	93 1f       	adc	r25, r19
     e38:	b6 01       	movw	r22, r12
     e3a:	82 51       	subi	r24, 0x12	; 18
     e3c:	98 4f       	sbci	r25, 0xF8	; 248
     e3e:	7c d9       	rcall	.-3336   	; 0x138 <vListInsertEnd>
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	80 91 bf 07 	lds	r24, 0x07BF	; 0x8007bf <xSchedulerRunning>
     e48:	88 23       	and	r24, r24
     e4a:	51 f0       	breq	.+20     	; 0xe60 <xTaskGenericCreate+0x1b2>
     e4c:	e0 91 12 08 	lds	r30, 0x0812	; 0x800812 <pxCurrentTCB>
     e50:	f0 91 13 08 	lds	r31, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
     e54:	86 89       	ldd	r24, Z+22	; 0x16
     e56:	80 17       	cp	r24, r16
     e58:	28 f4       	brcc	.+10     	; 0xe64 <xTaskGenericCreate+0x1b6>
     e5a:	41 de       	rcall	.-894    	; 0xade <vPortYield>
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	09 c0       	rjmp	.+18     	; 0xe72 <xTaskGenericCreate+0x1c4>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	07 c0       	rjmp	.+14     	; 0xe72 <xTaskGenericCreate+0x1c4>
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	05 c0       	rjmp	.+10     	; 0xe72 <xTaskGenericCreate+0x1c4>
     e68:	d8 8e       	std	Y+24, r13	; 0x18
     e6a:	cf 8a       	std	Y+23, r12	; 0x17
     e6c:	c6 01       	movw	r24, r12
     e6e:	47 cf       	rjmp	.-370    	; 0xcfe <xTaskGenericCreate+0x50>
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	1f 91       	pop	r17
     e78:	0f 91       	pop	r16
     e7a:	ff 90       	pop	r15
     e7c:	ef 90       	pop	r14
     e7e:	df 90       	pop	r13
     e80:	cf 90       	pop	r12
     e82:	bf 90       	pop	r11
     e84:	af 90       	pop	r10
     e86:	9f 90       	pop	r9
     e88:	8f 90       	pop	r8
     e8a:	7f 90       	pop	r7
     e8c:	6f 90       	pop	r6
     e8e:	5f 90       	pop	r5
     e90:	4f 90       	pop	r4
     e92:	08 95       	ret

00000e94 <vTaskStartScheduler>:
     e94:	af 92       	push	r10
     e96:	bf 92       	push	r11
     e98:	cf 92       	push	r12
     e9a:	df 92       	push	r13
     e9c:	ef 92       	push	r14
     e9e:	ff 92       	push	r15
     ea0:	0f 93       	push	r16
     ea2:	a1 2c       	mov	r10, r1
     ea4:	b1 2c       	mov	r11, r1
     ea6:	c1 2c       	mov	r12, r1
     ea8:	d1 2c       	mov	r13, r1
     eaa:	e1 2c       	mov	r14, r1
     eac:	f1 2c       	mov	r15, r1
     eae:	00 e0       	ldi	r16, 0x00	; 0
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	45 e5       	ldi	r20, 0x55	; 85
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	60 ec       	ldi	r22, 0xC0	; 192
     eba:	71 e0       	ldi	r23, 0x01	; 1
     ebc:	86 ed       	ldi	r24, 0xD6	; 214
     ebe:	98 e0       	ldi	r25, 0x08	; 8
     ec0:	f6 de       	rcall	.-532    	; 0xcae <xTaskGenericCreate>
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	41 f4       	brne	.+16     	; 0xed6 <vTaskStartScheduler+0x42>
     ec6:	f8 94       	cli
     ec8:	80 93 bf 07 	sts	0x07BF, r24	; 0x8007bf <xSchedulerRunning>
     ecc:	10 92 c3 07 	sts	0x07C3, r1	; 0x8007c3 <xTickCount+0x1>
     ed0:	10 92 c2 07 	sts	0x07C2, r1	; 0x8007c2 <xTickCount>
     ed4:	ca dd       	rcall	.-1132   	; 0xa6a <xPortStartScheduler>
     ed6:	0f 91       	pop	r16
     ed8:	ff 90       	pop	r15
     eda:	ef 90       	pop	r14
     edc:	df 90       	pop	r13
     ede:	cf 90       	pop	r12
     ee0:	bf 90       	pop	r11
     ee2:	af 90       	pop	r10
     ee4:	08 95       	ret

00000ee6 <vTaskSuspendAll>:
     ee6:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <uxSchedulerSuspended>
     eea:	8f 5f       	subi	r24, 0xFF	; 255
     eec:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxSchedulerSuspended>
     ef0:	08 95       	ret

00000ef2 <vTaskIncrementTick>:
     ef2:	0f 93       	push	r16
     ef4:	1f 93       	push	r17
     ef6:	cf 93       	push	r28
     ef8:	df 93       	push	r29
     efa:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <uxSchedulerSuspended>
     efe:	81 11       	cpse	r24, r1
     f00:	af c0       	rjmp	.+350    	; 0x1060 <vTaskIncrementTick+0x16e>
     f02:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <xTickCount>
     f06:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <xTickCount+0x1>
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <xTickCount+0x1>
     f10:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <xTickCount>
     f14:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <xTickCount>
     f18:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <xTickCount+0x1>
     f1c:	89 2b       	or	r24, r25
     f1e:	99 f5       	brne	.+102    	; 0xf86 <vTaskIncrementTick+0x94>
     f20:	80 91 da 07 	lds	r24, 0x07DA	; 0x8007da <pxDelayedTaskList>
     f24:	90 91 db 07 	lds	r25, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
     f28:	20 91 d8 07 	lds	r18, 0x07D8	; 0x8007d8 <pxOverflowDelayedTaskList>
     f2c:	30 91 d9 07 	lds	r19, 0x07D9	; 0x8007d9 <pxOverflowDelayedTaskList+0x1>
     f30:	30 93 db 07 	sts	0x07DB, r19	; 0x8007db <pxDelayedTaskList+0x1>
     f34:	20 93 da 07 	sts	0x07DA, r18	; 0x8007da <pxDelayedTaskList>
     f38:	90 93 d9 07 	sts	0x07D9, r25	; 0x8007d9 <pxOverflowDelayedTaskList+0x1>
     f3c:	80 93 d8 07 	sts	0x07D8, r24	; 0x8007d8 <pxOverflowDelayedTaskList>
     f40:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xNumOfOverflows>
     f44:	8f 5f       	subi	r24, 0xFF	; 255
     f46:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xNumOfOverflows>
     f4a:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <pxDelayedTaskList>
     f4e:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
     f52:	80 81       	ld	r24, Z
     f54:	81 11       	cpse	r24, r1
     f56:	07 c0       	rjmp	.+14     	; 0xf66 <vTaskIncrementTick+0x74>
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	9f ef       	ldi	r25, 0xFF	; 255
     f5c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <xNextTaskUnblockTime+0x1>
     f60:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <xNextTaskUnblockTime>
     f64:	10 c0       	rjmp	.+32     	; 0xf86 <vTaskIncrementTick+0x94>
     f66:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <pxDelayedTaskList>
     f6a:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
     f6e:	05 80       	ldd	r0, Z+5	; 0x05
     f70:	f6 81       	ldd	r31, Z+6	; 0x06
     f72:	e0 2d       	mov	r30, r0
     f74:	06 80       	ldd	r0, Z+6	; 0x06
     f76:	f7 81       	ldd	r31, Z+7	; 0x07
     f78:	e0 2d       	mov	r30, r0
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	93 81       	ldd	r25, Z+3	; 0x03
     f7e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <xNextTaskUnblockTime+0x1>
     f82:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <xNextTaskUnblockTime>
     f86:	20 91 c2 07 	lds	r18, 0x07C2	; 0x8007c2 <xTickCount>
     f8a:	30 91 c3 07 	lds	r19, 0x07C3	; 0x8007c3 <xTickCount+0x1>
     f8e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <xNextTaskUnblockTime>
     f92:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <xNextTaskUnblockTime+0x1>
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	08 f4       	brcc	.+2      	; 0xf9e <vTaskIncrementTick+0xac>
     f9c:	66 c0       	rjmp	.+204    	; 0x106a <vTaskIncrementTick+0x178>
     f9e:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <pxDelayedTaskList>
     fa2:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
     fa6:	80 81       	ld	r24, Z
     fa8:	88 23       	and	r24, r24
     faa:	99 f0       	breq	.+38     	; 0xfd2 <vTaskIncrementTick+0xe0>
     fac:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <pxDelayedTaskList>
     fb0:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
     fb4:	05 80       	ldd	r0, Z+5	; 0x05
     fb6:	f6 81       	ldd	r31, Z+6	; 0x06
     fb8:	e0 2d       	mov	r30, r0
     fba:	c6 81       	ldd	r28, Z+6	; 0x06
     fbc:	d7 81       	ldd	r29, Z+7	; 0x07
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	20 91 c2 07 	lds	r18, 0x07C2	; 0x8007c2 <xTickCount>
     fc6:	30 91 c3 07 	lds	r19, 0x07C3	; 0x8007c3 <xTickCount+0x1>
     fca:	28 17       	cp	r18, r24
     fcc:	39 07       	cpc	r19, r25
     fce:	f8 f4       	brcc	.+62     	; 0x100e <vTaskIncrementTick+0x11c>
     fd0:	19 c0       	rjmp	.+50     	; 0x1004 <vTaskIncrementTick+0x112>
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	9f ef       	ldi	r25, 0xFF	; 255
     fd6:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <xNextTaskUnblockTime+0x1>
     fda:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <xNextTaskUnblockTime>
     fde:	45 c0       	rjmp	.+138    	; 0x106a <vTaskIncrementTick+0x178>
     fe0:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <pxDelayedTaskList>
     fe4:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
     fe8:	05 80       	ldd	r0, Z+5	; 0x05
     fea:	f6 81       	ldd	r31, Z+6	; 0x06
     fec:	e0 2d       	mov	r30, r0
     fee:	c6 81       	ldd	r28, Z+6	; 0x06
     ff0:	d7 81       	ldd	r29, Z+7	; 0x07
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	20 91 c2 07 	lds	r18, 0x07C2	; 0x8007c2 <xTickCount>
     ffa:	30 91 c3 07 	lds	r19, 0x07C3	; 0x8007c3 <xTickCount+0x1>
     ffe:	28 17       	cp	r18, r24
    1000:	39 07       	cpc	r19, r25
    1002:	28 f4       	brcc	.+10     	; 0x100e <vTaskIncrementTick+0x11c>
    1004:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <xNextTaskUnblockTime+0x1>
    1008:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <xNextTaskUnblockTime>
    100c:	2e c0       	rjmp	.+92     	; 0x106a <vTaskIncrementTick+0x178>
    100e:	8e 01       	movw	r16, r28
    1010:	0e 5f       	subi	r16, 0xFE	; 254
    1012:	1f 4f       	sbci	r17, 0xFF	; 255
    1014:	c8 01       	movw	r24, r16
    1016:	f2 d8       	rcall	.-3612   	; 0x1fc <vListRemove>
    1018:	8c 89       	ldd	r24, Y+20	; 0x14
    101a:	9d 89       	ldd	r25, Y+21	; 0x15
    101c:	89 2b       	or	r24, r25
    101e:	19 f0       	breq	.+6      	; 0x1026 <vTaskIncrementTick+0x134>
    1020:	ce 01       	movw	r24, r28
    1022:	0c 96       	adiw	r24, 0x0c	; 12
    1024:	eb d8       	rcall	.-3626   	; 0x1fc <vListRemove>
    1026:	2e 89       	ldd	r18, Y+22	; 0x16
    1028:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    102c:	82 17       	cp	r24, r18
    102e:	10 f4       	brcc	.+4      	; 0x1034 <vTaskIncrementTick+0x142>
    1030:	20 93 c0 07 	sts	0x07C0, r18	; 0x8007c0 <uxTopReadyPriority>
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	c9 01       	movw	r24, r18
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
    1048:	b8 01       	movw	r22, r16
    104a:	82 51       	subi	r24, 0x12	; 18
    104c:	98 4f       	sbci	r25, 0xF8	; 248
    104e:	74 d8       	rcall	.-3864   	; 0x138 <vListInsertEnd>
    1050:	e0 91 da 07 	lds	r30, 0x07DA	; 0x8007da <pxDelayedTaskList>
    1054:	f0 91 db 07 	lds	r31, 0x07DB	; 0x8007db <pxDelayedTaskList+0x1>
    1058:	80 81       	ld	r24, Z
    105a:	81 11       	cpse	r24, r1
    105c:	c1 cf       	rjmp	.-126    	; 0xfe0 <vTaskIncrementTick+0xee>
    105e:	b9 cf       	rjmp	.-142    	; 0xfd2 <vTaskIncrementTick+0xe0>
    1060:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <uxMissedTicks>
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    1066:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <uxMissedTicks>
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret

00001074 <xTaskResumeAll>:
    1074:	cf 92       	push	r12
    1076:	df 92       	push	r13
    1078:	ef 92       	push	r14
    107a:	ff 92       	push	r15
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	0f 92       	push	r0
    108a:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <uxSchedulerSuspended>
    108e:	81 50       	subi	r24, 0x01	; 1
    1090:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <uxSchedulerSuspended>
    1094:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <uxSchedulerSuspended>
    1098:	81 11       	cpse	r24, r1
    109a:	5f c0       	rjmp	.+190    	; 0x115a <xTaskResumeAll+0xe6>
    109c:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <uxCurrentNumberOfTasks>
    10a0:	81 11       	cpse	r24, r1
    10a2:	2f c0       	rjmp	.+94     	; 0x1102 <xTaskResumeAll+0x8e>
    10a4:	5d c0       	rjmp	.+186    	; 0x1160 <xTaskResumeAll+0xec>
    10a6:	d7 01       	movw	r26, r14
    10a8:	15 96       	adiw	r26, 0x05	; 5
    10aa:	ed 91       	ld	r30, X+
    10ac:	fc 91       	ld	r31, X
    10ae:	16 97       	sbiw	r26, 0x06	; 6
    10b0:	c6 81       	ldd	r28, Z+6	; 0x06
    10b2:	d7 81       	ldd	r29, Z+7	; 0x07
    10b4:	ce 01       	movw	r24, r28
    10b6:	0c 96       	adiw	r24, 0x0c	; 12
    10b8:	a1 d8       	rcall	.-3774   	; 0x1fc <vListRemove>
    10ba:	8e 01       	movw	r16, r28
    10bc:	0e 5f       	subi	r16, 0xFE	; 254
    10be:	1f 4f       	sbci	r17, 0xFF	; 255
    10c0:	c8 01       	movw	r24, r16
    10c2:	9c d8       	rcall	.-3784   	; 0x1fc <vListRemove>
    10c4:	2e 89       	ldd	r18, Y+22	; 0x16
    10c6:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    10ca:	82 17       	cp	r24, r18
    10cc:	10 f4       	brcc	.+4      	; 0x10d2 <xTaskResumeAll+0x5e>
    10ce:	20 93 c0 07 	sts	0x07C0, r18	; 0x8007c0 <uxTopReadyPriority>
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	c9 01       	movw	r24, r18
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	b8 01       	movw	r22, r16
    10e8:	82 51       	subi	r24, 0x12	; 18
    10ea:	98 4f       	sbci	r25, 0xF8	; 248
    10ec:	25 d8       	rcall	.-4022   	; 0x138 <vListInsertEnd>
    10ee:	e0 91 12 08 	lds	r30, 0x0812	; 0x800812 <pxCurrentTCB>
    10f2:	f0 91 13 08 	lds	r31, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
    10f6:	9e 89       	ldd	r25, Y+22	; 0x16
    10f8:	86 89       	ldd	r24, Z+22	; 0x16
    10fa:	98 17       	cp	r25, r24
    10fc:	58 f0       	brcs	.+22     	; 0x1114 <xTaskResumeAll+0xa0>
    10fe:	dc 2c       	mov	r13, r12
    1100:	09 c0       	rjmp	.+18     	; 0x1114 <xTaskResumeAll+0xa0>
    1102:	d1 2c       	mov	r13, r1
    1104:	0f 2e       	mov	r0, r31
    1106:	ff ec       	ldi	r31, 0xCF	; 207
    1108:	ef 2e       	mov	r14, r31
    110a:	f7 e0       	ldi	r31, 0x07	; 7
    110c:	ff 2e       	mov	r15, r31
    110e:	f0 2d       	mov	r31, r0
    1110:	cc 24       	eor	r12, r12
    1112:	c3 94       	inc	r12
    1114:	f7 01       	movw	r30, r14
    1116:	80 81       	ld	r24, Z
    1118:	81 11       	cpse	r24, r1
    111a:	c5 cf       	rjmp	.-118    	; 0x10a6 <xTaskResumeAll+0x32>
    111c:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <uxMissedTicks>
    1120:	88 23       	and	r24, r24
    1122:	79 f0       	breq	.+30     	; 0x1142 <xTaskResumeAll+0xce>
    1124:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <uxMissedTicks>
    1128:	88 23       	and	r24, r24
    112a:	91 f0       	breq	.+36     	; 0x1150 <xTaskResumeAll+0xdc>
    112c:	e2 de       	rcall	.-572    	; 0xef2 <vTaskIncrementTick>
    112e:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <uxMissedTicks>
    1132:	81 50       	subi	r24, 0x01	; 1
    1134:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <uxMissedTicks>
    1138:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <uxMissedTicks>
    113c:	81 11       	cpse	r24, r1
    113e:	f6 cf       	rjmp	.-20     	; 0x112c <xTaskResumeAll+0xb8>
    1140:	07 c0       	rjmp	.+14     	; 0x1150 <xTaskResumeAll+0xdc>
    1142:	f1 e0       	ldi	r31, 0x01	; 1
    1144:	df 16       	cp	r13, r31
    1146:	21 f0       	breq	.+8      	; 0x1150 <xTaskResumeAll+0xdc>
    1148:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <xMissedYield>
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	39 f4       	brne	.+14     	; 0x115e <xTaskResumeAll+0xea>
    1150:	10 92 bc 07 	sts	0x07BC, r1	; 0x8007bc <xMissedYield>
    1154:	c4 dc       	rcall	.-1656   	; 0xade <vPortYield>
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	03 c0       	rjmp	.+6      	; 0x1160 <xTaskResumeAll+0xec>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <xTaskResumeAll+0xec>
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	df 90       	pop	r13
    1172:	cf 90       	pop	r12
    1174:	08 95       	ret

00001176 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    117c:	89 2b       	or	r24, r25
    117e:	91 f0       	breq	.+36     	; 0x11a4 <vTaskDelay+0x2e>
		{
			vTaskSuspendAll();
    1180:	b2 de       	rcall	.-668    	; 0xee6 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1182:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <xTickCount>
    1186:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <xTickCount+0x1>
    118a:	c8 0f       	add	r28, r24
    118c:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    118e:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <pxCurrentTCB>
    1192:	90 91 13 08 	lds	r25, 0x0813	; 0x800813 <pxCurrentTCB+0x1>
    1196:	02 96       	adiw	r24, 0x02	; 2
    1198:	31 d8       	rcall	.-3998   	; 0x1fc <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    119a:	ce 01       	movw	r24, r28
    119c:	53 dd       	rcall	.-1370   	; 0xc44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    119e:	6a df       	rcall	.-300    	; 0x1074 <xTaskResumeAll>
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    11a0:	81 11       	cpse	r24, r1
    11a2:	01 c0       	rjmp	.+2      	; 0x11a6 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
    11a4:	9c dc       	rcall	.-1736   	; 0xade <vPortYield>
		}
	}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <prvIdleTask>:
		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    11ac:	0f 2e       	mov	r0, r31
    11ae:	f6 ec       	ldi	r31, 0xC6	; 198
    11b0:	ef 2e       	mov	r14, r31
    11b2:	f7 e0       	ldi	r31, 0x07	; 7
    11b4:	ff 2e       	mov	r15, r31
    11b6:	f0 2d       	mov	r31, r0

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    11b8:	ce ee       	ldi	r28, 0xEE	; 238
    11ba:	d7 e0       	ldi	r29, 0x07	; 7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    11bc:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <uxTasksDeleted>
    11c0:	88 23       	and	r24, r24
    11c2:	39 f1       	breq	.+78     	; 0x1212 <prvIdleTask+0x66>
		{
			vTaskSuspendAll();
    11c4:	90 de       	rcall	.-736    	; 0xee6 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    11c6:	d7 01       	movw	r26, r14
    11c8:	1c 91       	ld	r17, X
			xTaskResumeAll();
    11ca:	54 df       	rcall	.-344    	; 0x1074 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    11cc:	11 23       	and	r17, r17
    11ce:	09 f1       	breq	.+66     	; 0x1212 <prvIdleTask+0x66>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	f8 94       	cli
    11d4:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    11d6:	d7 01       	movw	r26, r14
    11d8:	15 96       	adiw	r26, 0x05	; 5
    11da:	ed 91       	ld	r30, X+
    11dc:	fc 91       	ld	r31, X
    11de:	16 97       	sbiw	r26, 0x06	; 6
    11e0:	06 81       	ldd	r16, Z+6	; 0x06
    11e2:	17 81       	ldd	r17, Z+7	; 0x07
					vListRemove( &( pxTCB->xGenericListItem ) );
    11e4:	c8 01       	movw	r24, r16
    11e6:	02 96       	adiw	r24, 0x02	; 2
    11e8:	09 d8       	rcall	.-4078   	; 0x1fc <vListRemove>
					--uxCurrentNumberOfTasks;
    11ea:	80 91 c4 07 	lds	r24, 0x07C4	; 0x8007c4 <uxCurrentNumberOfTasks>
    11ee:	81 50       	subi	r24, 0x01	; 1
    11f0:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <uxCurrentNumberOfTasks>
					--uxTasksDeleted;
    11f4:	80 91 c5 07 	lds	r24, 0x07C5	; 0x8007c5 <uxTasksDeleted>
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <uxTasksDeleted>
				}
				taskEXIT_CRITICAL();
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    1202:	f8 01       	movw	r30, r16
    1204:	87 89       	ldd	r24, Z+23	; 0x17
    1206:	90 8d       	ldd	r25, Z+24	; 0x18
    1208:	0e 94 89 00 	call	0x112	; 0x112 <vPortFree>
		vPortFree( pxTCB );
    120c:	c8 01       	movw	r24, r16
    120e:	0e 94 89 00 	call	0x112	; 0x112 <vPortFree>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    1212:	88 81       	ld	r24, Y
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	90 f2       	brcs	.-92     	; 0x11bc <prvIdleTask+0x10>
			{
				taskYIELD();
    1218:	62 dc       	rcall	.-1852   	; 0xade <vPortYield>
    121a:	d0 cf       	rjmp	.-96     	; 0x11bc <prvIdleTask+0x10>

0000121c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    121c:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <uxSchedulerSuspended>
    1220:	81 11       	cpse	r24, r1
    1222:	13 c0       	rjmp	.+38     	; 0x124a <vTaskSwitchContext+0x2e>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    1224:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	fc 01       	movw	r30, r24
    122c:	ee 0f       	add	r30, r30
    122e:	ff 1f       	adc	r31, r31
    1230:	ee 0f       	add	r30, r30
    1232:	ff 1f       	adc	r31, r31
    1234:	ee 0f       	add	r30, r30
    1236:	ff 1f       	adc	r31, r31
    1238:	8e 0f       	add	r24, r30
    123a:	9f 1f       	adc	r25, r31
    123c:	fc 01       	movw	r30, r24
    123e:	e2 51       	subi	r30, 0x12	; 18
    1240:	f8 4f       	sbci	r31, 0xF8	; 248
    1242:	80 81       	ld	r24, Z
    1244:	88 23       	and	r24, r24
    1246:	29 f0       	breq	.+10     	; 0x1252 <vTaskSwitchContext+0x36>
    1248:	1b c0       	rjmp	.+54     	; 0x1280 <vTaskSwitchContext+0x64>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <xMissedYield>
    1250:	08 95       	ret
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    1252:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    1256:	81 50       	subi	r24, 0x01	; 1
    1258:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <uxTopReadyPriority>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    125c:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	fc 01       	movw	r30, r24
    1264:	ee 0f       	add	r30, r30
    1266:	ff 1f       	adc	r31, r31
    1268:	ee 0f       	add	r30, r30
    126a:	ff 1f       	adc	r31, r31
    126c:	ee 0f       	add	r30, r30
    126e:	ff 1f       	adc	r31, r31
    1270:	8e 0f       	add	r24, r30
    1272:	9f 1f       	adc	r25, r31
    1274:	fc 01       	movw	r30, r24
    1276:	e2 51       	subi	r30, 0x12	; 18
    1278:	f8 4f       	sbci	r31, 0xF8	; 248
    127a:	80 81       	ld	r24, Z
    127c:	88 23       	and	r24, r24
    127e:	49 f3       	breq	.-46     	; 0x1252 <vTaskSwitchContext+0x36>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    1280:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <uxTopReadyPriority>
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	9c 01       	movw	r18, r24
    1288:	22 0f       	add	r18, r18
    128a:	33 1f       	adc	r19, r19
    128c:	22 0f       	add	r18, r18
    128e:	33 1f       	adc	r19, r19
    1290:	22 0f       	add	r18, r18
    1292:	33 1f       	adc	r19, r19
    1294:	28 0f       	add	r18, r24
    1296:	39 1f       	adc	r19, r25
    1298:	d9 01       	movw	r26, r18
    129a:	a2 51       	subi	r26, 0x12	; 18
    129c:	b8 4f       	sbci	r27, 0xF8	; 248
    129e:	11 96       	adiw	r26, 0x01	; 1
    12a0:	ed 91       	ld	r30, X+
    12a2:	fc 91       	ld	r31, X
    12a4:	12 97       	sbiw	r26, 0x02	; 2
    12a6:	02 80       	ldd	r0, Z+2	; 0x02
    12a8:	f3 81       	ldd	r31, Z+3	; 0x03
    12aa:	e0 2d       	mov	r30, r0
    12ac:	12 96       	adiw	r26, 0x02	; 2
    12ae:	fc 93       	st	X, r31
    12b0:	ee 93       	st	-X, r30
    12b2:	11 97       	sbiw	r26, 0x01	; 1
    12b4:	2f 50       	subi	r18, 0x0F	; 15
    12b6:	38 4f       	sbci	r19, 0xF8	; 248
    12b8:	e2 17       	cp	r30, r18
    12ba:	f3 07       	cpc	r31, r19
    12bc:	29 f4       	brne	.+10     	; 0x12c8 <vTaskSwitchContext+0xac>
    12be:	22 81       	ldd	r18, Z+2	; 0x02
    12c0:	33 81       	ldd	r19, Z+3	; 0x03
    12c2:	fd 01       	movw	r30, r26
    12c4:	32 83       	std	Z+2, r19	; 0x02
    12c6:	21 83       	std	Z+1, r18	; 0x01
    12c8:	fc 01       	movw	r30, r24
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	ee 0f       	add	r30, r30
    12d0:	ff 1f       	adc	r31, r31
    12d2:	ee 0f       	add	r30, r30
    12d4:	ff 1f       	adc	r31, r31
    12d6:	8e 0f       	add	r24, r30
    12d8:	9f 1f       	adc	r25, r31
    12da:	fc 01       	movw	r30, r24
    12dc:	e2 51       	subi	r30, 0x12	; 18
    12de:	f8 4f       	sbci	r31, 0xF8	; 248
    12e0:	01 80       	ldd	r0, Z+1	; 0x01
    12e2:	f2 81       	ldd	r31, Z+2	; 0x02
    12e4:	e0 2d       	mov	r30, r0
    12e6:	86 81       	ldd	r24, Z+6	; 0x06
    12e8:	97 81       	ldd	r25, Z+7	; 0x07
    12ea:	90 93 13 08 	sts	0x0813, r25	; 0x800813 <pxCurrentTCB+0x1>
    12ee:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <pxCurrentTCB>
    12f2:	08 95       	ret

000012f4 <__udivmodqi4>:
    12f4:	99 1b       	sub	r25, r25
    12f6:	79 e0       	ldi	r23, 0x09	; 9
    12f8:	04 c0       	rjmp	.+8      	; 0x1302 <__udivmodqi4_ep>

000012fa <__udivmodqi4_loop>:
    12fa:	99 1f       	adc	r25, r25
    12fc:	96 17       	cp	r25, r22
    12fe:	08 f0       	brcs	.+2      	; 0x1302 <__udivmodqi4_ep>
    1300:	96 1b       	sub	r25, r22

00001302 <__udivmodqi4_ep>:
    1302:	88 1f       	adc	r24, r24
    1304:	7a 95       	dec	r23
    1306:	c9 f7       	brne	.-14     	; 0x12fa <__udivmodqi4_loop>
    1308:	80 95       	com	r24
    130a:	08 95       	ret

0000130c <memset>:
    130c:	dc 01       	movw	r26, r24
    130e:	01 c0       	rjmp	.+2      	; 0x1312 <memset+0x6>
    1310:	6d 93       	st	X+, r22
    1312:	41 50       	subi	r20, 0x01	; 1
    1314:	50 40       	sbci	r21, 0x00	; 0
    1316:	e0 f7       	brcc	.-8      	; 0x1310 <memset+0x4>
    1318:	08 95       	ret

0000131a <strncpy>:
    131a:	fb 01       	movw	r30, r22
    131c:	dc 01       	movw	r26, r24
    131e:	41 50       	subi	r20, 0x01	; 1
    1320:	50 40       	sbci	r21, 0x00	; 0
    1322:	48 f0       	brcs	.+18     	; 0x1336 <strncpy+0x1c>
    1324:	01 90       	ld	r0, Z+
    1326:	0d 92       	st	X+, r0
    1328:	00 20       	and	r0, r0
    132a:	c9 f7       	brne	.-14     	; 0x131e <strncpy+0x4>
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <strncpy+0x16>
    132e:	1d 92       	st	X+, r1
    1330:	41 50       	subi	r20, 0x01	; 1
    1332:	50 40       	sbci	r21, 0x00	; 0
    1334:	e0 f7       	brcc	.-8      	; 0x132e <strncpy+0x14>
    1336:	08 95       	ret

00001338 <_exit>:
    1338:	f8 94       	cli

0000133a <__stop_program>:
    133a:	ff cf       	rjmp	.-2      	; 0x133a <__stop_program>
